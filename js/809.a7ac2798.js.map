{"version":3,"file":"js/809.a7ac2798.js","mappings":"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","sources":["webpack://battleship/./src/components/EnemySquare.vue?2734","webpack://battleship/./src/components/EnemySquare.vue","webpack://battleship/./src/components/AbilityButtons.vue?79b3","webpack://battleship/./src/components/AbilityButtons.vue","webpack://battleship/./src/components/MatchResultModal.vue?d324","webpack://battleship/./src/components/MatchResultModal.vue","webpack://battleship/./src/views/Game.vue?7ed8","webpack://battleship/./src/views/Game.vue"],"sourcesContent":["import { defineComponent as _defineComponent } from 'vue'\nimport { unref as _unref, createVNode as _createVNode, normalizeClass as _normalizeClass, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\"\n\nimport { ShipName, Mutation } from '@/store/enums';\r\nimport { Tile } from '@/store/interfaces';\r\nimport { useStore } from '@/store';\r\nimport Sprite from '@/components/Sprite.vue';\r\nimport { computed } from 'vue';\r\nimport { isInvalidSquare, makeRandomValidMove } from '@/utils/shipUtils';\r\n\r\n\r\ninterface SquareProps {\r\n  tile: Tile;\r\n  row: number;\r\n  col: number;\r\n}\r\n\r\n\nexport default /*#__PURE__*/_defineComponent({\n  __name: 'EnemySquare',\n  props: {\n    tile: null,\n    row: null,\n    col: null\n  },\n  setup(__props: any) {\n\nconst props = __props as {\r\n  tile: Tile;\r\n  row: number;\r\n  col: number;\r\n};\n\r\n\r\nconst store = useStore();\r\n\r\nconst background = computed(() => {\r\n  if (props.tile.background.isWater) return 'water';\r\n  if (props.tile.background.isLand) return 'land';\r\n  if (props.tile.background.isOutOfBounds) return 'out-of-bounds';\r\n});\r\n\r\nfunction sleep(ms: number) {\r\n  return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n\r\nasync function Attack() {\r\n  if (store.state.computer.hasCurrentTurn) return;\r\n  if (store.state.game.isMoveInProgress) return;\r\n  const computer_board = store.state.computer.board\r\n  const player_board = store.state.player.board\r\n  if (isInvalidSquare(props.row, props.col, computer_board)) return;\r\n\r\n  // Prevent player from spamming squares\r\n  store.commit(Mutation.SET_GAME_IS_MOVE_IN_PROGRESS, true);\r\n\r\n  // Player submarine ability\r\n  if (store.state.player.isUsingSubmarineAbility) {\r\n\r\n    // Iterate over a 3x3 area around the square\r\n    for (let row = props.row - 1; row <= props.row + 1; row++) {\r\n      for (let col = props.col - 1; col <= props.col + 1; col++) {\r\n\r\n        // Make sure the square is valid\r\n        if (isInvalidSquare(row, col, computer_board)) continue;\r\n\r\n        // If the square contains a ship, uncover it\r\n        const tile = computer_board[row][col];\r\n        if (tile.ship !== undefined) {\r\n          const new_tile = JSON.parse(JSON.stringify(tile));\r\n          new_tile.contains.uncoveredShip = true;\r\n          store.commit(Mutation.SET_COMPUTER_TILE, {\r\n            row: row,\r\n            col: col,\r\n            tile: new_tile\r\n          });\r\n        }\r\n\r\n        // Otherwise, mark it as a missed shot\r\n        else {\r\n          \r\n          // Except if it already contains a missed shot, successful shot, or uncovered ship\r\n          if (tile.contains.missedShot) continue;\r\n          if (tile.contains.successfulShot) continue;\r\n          if (tile.contains.uncoveredShip) continue;\r\n\r\n          const new_tile = JSON.parse(JSON.stringify(tile));\r\n          new_tile.contains.missedShot = true;\r\n          store.commit(Mutation.SET_COMPUTER_TILE, {\r\n            row: row,\r\n            col: col,\r\n            tile: new_tile\r\n          });\r\n        }\r\n\r\n      }\r\n    }\r\n\r\n    // Uncover the submarine\r\n    for (let row = 0; row < player_board.length; row++) {\r\n      for (let col = 0; col < player_board[row].length; col++) {\r\n        if (player_board[row][col].ship?.name === ShipName.SUBMARINE) {\r\n          const new_tile = JSON.parse(JSON.stringify(player_board[row][col]));\r\n          new_tile.contains.uncoveredShip = true;\r\n          store.commit(Mutation.SET_PLAYER_TILE, {\r\n            row: row,\r\n            col: col,\r\n            tile: new_tile\r\n          });\r\n        }\r\n      }\r\n    }\r\n  \r\n  }\r\n\r\n  // Player battleship ability\r\n  else if (store.state.player.isUsingBattleshipAbility) {\r\n\r\n    // Iterate over a 3x3 square around the battleship\r\n    for (let row = props.row - 1; row <= props.row + 1; row++) {\r\n      for (let col = props.col - 1; col <= props.col + 1; col++) {\r\n\r\n        // Make sure the square is valid\r\n        if (isInvalidSquare(row, col, computer_board)) continue;\r\n\r\n        // If the square contains a ship, hit it\r\n        const tile = computer_board[row][col];\r\n        if (tile.ship !== undefined) {\r\n          const new_tile = JSON.parse(JSON.stringify(tile));\r\n          new_tile.contains.successfulShot = true;\r\n          store.commit(Mutation.SET_COMPUTER_TILE, {\r\n            row: row,\r\n            col: col,\r\n            tile: new_tile\r\n          });\r\n\r\n          // If the ship is an aircraft carrier, subtract 1 from its health\r\n          if (tile.ship?.name === ShipName.AIRCRAFT_CARRIER) {\r\n            store.commit(Mutation.SET_COMPUTER_AIRCRAFT_CARRIER_HEALTH, store.state.computer.aircraftCarrierHealth - 1);\r\n          }\r\n\r\n          // If the ship is a battleship, subtract 1 from its health\r\n          else if (tile.ship?.name === ShipName.BATTLESHIP) {\r\n            store.commit(Mutation.SET_COMPUTER_BATTLESHIP_HEALTH, store.state.computer.battleshipHealth - 1);\r\n          }\r\n\r\n          // If the ship is a submarine, sink it, as it only has 1 health\r\n          else if (tile.ship?.name === ShipName.SUBMARINE) {\r\n            store.commit(Mutation.SET_COMPUTER_HAS_USED_SUBMARINE_ABILITY, true);\r\n          }\r\n\r\n        }\r\n\r\n        // Otherwise, mark it as a missed shot\r\n        else {\r\n          const new_tile = JSON.parse(JSON.stringify(tile));\r\n          new_tile.contains.missedShot = true;\r\n          store.commit(Mutation.SET_COMPUTER_TILE, {\r\n            row: row,\r\n            col: col,\r\n            tile: new_tile\r\n          });\r\n        }\r\n\r\n      }\r\n    }\r\n\r\n    // Uncover the battleship\r\n    for (let row = 0; row < player_board.length; row++) {\r\n      for (let col = 0; col < player_board[row].length; col++) {\r\n        if (player_board[row][col].ship?.name === ShipName.BATTLESHIP) {\r\n          const new_tile = JSON.parse(JSON.stringify(player_board[row][col]));\r\n          new_tile.contains.uncoveredShip = true;\r\n          store.commit(Mutation.SET_PLAYER_TILE, {\r\n            row: row,\r\n            col: col,\r\n            tile: new_tile\r\n          });\r\n        }\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  // Player aircraft carrier ability\r\n  else if (store.state.player.isUsingAircraftCarrierAbility) {\r\n    const tile = computer_board[props.row][props.col];\r\n\r\n    // Hit the square\r\n    const new_tile = JSON.parse(JSON.stringify(tile));\r\n    if (new_tile.ship !== undefined) {\r\n      new_tile.contains.successfulShot = true;\r\n\r\n      // If the ship is an aircraft carrier, subtract 1 from its health\r\n      if (tile.ship?.name === ShipName.AIRCRAFT_CARRIER) {\r\n        store.commit(Mutation.SET_COMPUTER_AIRCRAFT_CARRIER_HEALTH, store.state.computer.aircraftCarrierHealth - 1);\r\n      }\r\n\r\n      // If the ship is a battleship, subtract 1 from its health\r\n      else if (tile.ship?.name === ShipName.BATTLESHIP) {\r\n        store.commit(Mutation.SET_COMPUTER_BATTLESHIP_HEALTH, store.state.computer.battleshipHealth - 1);\r\n      }\r\n\r\n      // If the ship is a submarine, sink it, as it only has 1 health\r\n      else if (tile.ship?.name === ShipName.SUBMARINE) {\r\n        store.commit(Mutation.SET_COMPUTER_HAS_USED_SUBMARINE_ABILITY, true);\r\n      }\r\n\r\n    }\r\n    else {\r\n      new_tile.contains.missedShot = true;\r\n    }\r\n\r\n    // Reflect the state of the square\r\n    store.commit(Mutation.SET_COMPUTER_TILE, {\r\n      row: props.row,\r\n      col: props.col,\r\n      tile: new_tile\r\n    });\r\n\r\n    // Substract 1 from the aircraft carrier's shots\r\n    store.commit(Mutation.SET_PLAYER_AIRCRAFT_CARRIER_SHOTS, store.state.player.aircraftCarrierShots - 1);\r\n\r\n    // Check if the player won\r\n    let player_won = true;\r\n    for (let row = 0; row < computer_board.length; row++) {\r\n      for (let col = 0; col < computer_board[row].length; col++) {\r\n        if (computer_board[row][col].ship !== undefined && !computer_board[row][col].contains.successfulShot) {\r\n          player_won = false;\r\n          break\r\n        }\r\n      }\r\n    }\r\n\r\n    // If so, change the state of the game\r\n    if (player_won) {\r\n      store.commit(Mutation.SET_GAME_IS_IN_PROGRESS, false);\r\n      store.commit(Mutation.SET_PLAYER_HAS_WON_THE_GAME, true);\r\n      return;\r\n    }\r\n\r\n    // If it isn't the last shot, return\r\n    if (store.state.player.aircraftCarrierShots > 0) {\r\n      store.commit(Mutation.SET_GAME_IS_MOVE_IN_PROGRESS, false);\r\n      return;\r\n    }\r\n\r\n    // Uncover the aircraft carrier\r\n    for (let row = 0; row < player_board.length; row++) {\r\n      for (let col = 0; col < player_board[row].length; col++) {\r\n        if (player_board[row][col].ship?.name === ShipName.AIRCRAFT_CARRIER) {\r\n          const new_tile = JSON.parse(JSON.stringify(player_board[row][col]));\r\n          new_tile.contains.uncoveredShip = true;\r\n          store.commit(Mutation.SET_PLAYER_TILE, {\r\n            row: row,\r\n            col: col,\r\n            tile: new_tile\r\n          });\r\n        }\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  // Player normal move\r\n  else {\r\n    const tile = computer_board[props.row][props.col];\r\n\r\n    // Hit the square\r\n    const new_tile = JSON.parse(JSON.stringify(tile));\r\n    if (new_tile.ship !== undefined) {\r\n      new_tile.contains.successfulShot = true;\r\n\r\n      // If the ship is an aircraft carrier, subtract 1 from its health\r\n      if (tile.ship?.name === ShipName.AIRCRAFT_CARRIER) {\r\n        store.commit(Mutation.SET_COMPUTER_AIRCRAFT_CARRIER_HEALTH, store.state.computer.aircraftCarrierHealth - 1);\r\n      }\r\n\r\n      // If the ship is a battleship, subtract 1 from its health\r\n      else if (tile.ship?.name === ShipName.BATTLESHIP) {\r\n        store.commit(Mutation.SET_COMPUTER_BATTLESHIP_HEALTH, store.state.computer.battleshipHealth - 1);\r\n      }\r\n\r\n      // If the ship is a submarine, sink it, as it only has 1 health\r\n      else if (tile.ship?.name === ShipName.SUBMARINE) {\r\n        store.commit(Mutation.SET_COMPUTER_HAS_USED_SUBMARINE_ABILITY, true);\r\n      }\r\n\r\n    }\r\n    else {\r\n      new_tile.contains.missedShot = true;\r\n    }\r\n\r\n    // Reflect the state of the square\r\n    store.commit(Mutation.SET_COMPUTER_TILE, {\r\n      row: props.row,\r\n      col: props.col,\r\n      tile: new_tile\r\n    });\r\n\r\n  }\r\n\r\n  // Wait for 1 second (1000 milliseconds)\r\n  await sleep(1000);\r\n\r\n  // Make sure the abilities are consumed after being used\r\n  if (store.state.player.isUsingAircraftCarrierAbility) {\r\n    store.commit(Mutation.SET_PLAYER_HAS_USED_AIRCRAFT_CARRIER_ABILITY, true);\r\n    store.commit(Mutation.SET_PLAYER_IS_USING_AIRCRAFT_CARRIER_ABILITY, false);\r\n  } else if (store.state.player.isUsingBattleshipAbility) {\r\n    store.commit(Mutation.SET_PLAYER_HAS_USED_BATTLESHIP_ABILITY, true);\r\n    store.commit(Mutation.SET_PLAYER_IS_USING_BATTLESHIP_ABILITY, false);\r\n  } else if (store.state.player.isUsingSubmarineAbility) {\r\n    store.commit(Mutation.SET_PLAYER_HAS_USED_SUBMARINE_ABILITY, true);\r\n    store.commit(Mutation.SET_PLAYER_IS_USING_SUBMARINE_ABILITY, false);\r\n  }\r\n\r\n  // Check if either the battleship or the aircraft carrier were sunk\r\n  if (store.state.computer.aircraftCarrierHealth === 0) {\r\n    store.commit(Mutation.SET_COMPUTER_HAS_USED_AIRCRAFT_CARRIER_ABILITY, true);\r\n  } else if (store.state.computer.battleshipHealth === 0) {\r\n    store.commit(Mutation.SET_COMPUTER_HAS_USED_BATTLESHIP_ABILITY, true);\r\n  }\r\n\r\n  // Check if the player won\r\n  let player_won = true;\r\n  for (let row = 0; row < computer_board.length; row++) {\r\n    for (let col = 0; col < computer_board[row].length; col++) {\r\n      if (computer_board[row][col].ship !== undefined && !computer_board[row][col].contains.successfulShot) {\r\n        player_won = false;\r\n        break\r\n      }\r\n    }\r\n  }\r\n\r\n  // If so, change the state of the game\r\n  if (player_won) {\r\n    store.commit(Mutation.SET_GAME_IS_IN_PROGRESS, false);\r\n    store.commit(Mutation.SET_PLAYER_HAS_WON_THE_GAME, true);\r\n    return;\r\n  }\r\n\r\n  // Since the players move is over, change the turn\r\n  store.commit(Mutation.SET_PLAYER_HAS_CURRENT_TURN, false);\r\n  store.commit(Mutation.SET_COMPUTER_HAS_CURRENT_TURN, true);\r\n\r\n  // For now, always try to use the abilities if it hasn't already\r\n  if (!store.state.computer.hasUsedAircraftCarrierAbility) {\r\n    store.commit(Mutation.SET_COMPUTER_IS_USING_AIRCRAFT_CARRIER_ABILITY, true);\r\n  } else if (!store.state.computer.hasUsedBattleshipAbility) {\r\n    store.commit(Mutation.SET_COMPUTER_IS_USING_BATTLESHIP_ABILITY, true);\r\n  } else if (!store.state.computer.hasUsedSubmarineAbility) {\r\n    store.commit(Mutation.SET_COMPUTER_IS_USING_SUBMARINE_ABILITY, true);\r\n  }\r\n\r\n  // Wait for 1 second (1000 milliseconds)\r\n  await sleep(1000);\r\n\r\n  // Computer submarine ability\r\n  if (store.state.computer.isUsingSubmarineAbility) {\r\n    const move = makeRandomValidMove(player_board);\r\n\r\n    // Iterate over a 3x3 area around the square\r\n    for (let row = move.row - 1; row <= move.row + 1; row++) {\r\n      for (let col = move.col - 1; col <= move.col + 1; col++) {\r\n\r\n        // Make sure the square is valid\r\n        if (isInvalidSquare(row, col, player_board)) continue;\r\n\r\n        // If the square contains a ship, uncover it\r\n        const tile = player_board[row][col];\r\n        if (tile.ship !== undefined) {\r\n          const new_tile = JSON.parse(JSON.stringify(tile));\r\n          new_tile.contains.uncoveredShip = true;\r\n          store.commit(Mutation.SET_PLAYER_TILE, {\r\n            row: row,\r\n            col: col,\r\n            tile: new_tile\r\n          });\r\n        }\r\n\r\n        // Otherwise, mark it as a missed shot\r\n        else {\r\n          \r\n          // Except if it already contains a missed shot, successful shot, or uncovered ship\r\n          if (tile.contains.missedShot) continue;\r\n          if (tile.contains.successfulShot) continue;\r\n          if (tile.contains.uncoveredShip) continue;\r\n\r\n          const new_tile = JSON.parse(JSON.stringify(tile));\r\n          new_tile.contains.missedShot = true;\r\n          store.commit(Mutation.SET_PLAYER_TILE, {\r\n            row: row,\r\n            col: col,\r\n            tile: new_tile\r\n          });\r\n        }\r\n\r\n      }\r\n    }\r\n\r\n    // Uncover the submarine\r\n    for (let row = 0; row < computer_board.length; row++) {\r\n      for (let col = 0; col < computer_board[row].length; col++) {\r\n        if (computer_board[row][col].ship?.name === ShipName.SUBMARINE) {\r\n          const new_tile = JSON.parse(JSON.stringify(computer_board[row][col]));\r\n          new_tile.contains.uncoveredShip = true;\r\n          store.commit(Mutation.SET_COMPUTER_TILE, {\r\n            row: row,\r\n            col: col,\r\n            tile: new_tile\r\n          });\r\n        }\r\n      }\r\n    }\r\n  \r\n  }\r\n\r\n  // Computer battleship ability\r\n  else if (store.state.computer.isUsingBattleshipAbility) {\r\n    const move = makeRandomValidMove(player_board);\r\n\r\n    // Iterate over a 3x3 area around the square\r\n    for (let row = move.row - 1; row <= move.row + 1; row++) {\r\n      for (let col = move.col - 1; col <= move.col + 1; col++) {\r\n\r\n        // Make sure the square is valid\r\n        if (isInvalidSquare(row, col, player_board)) continue;\r\n\r\n        // If it already contains a missed shot, or a successful shot, skip it\r\n        const tile = player_board[row][col];\r\n        if (tile.contains.missedShot) continue;\r\n        if (tile.contains.successfulShot) continue;\r\n\r\n        // If the square contains a ship, hit it\r\n        if (tile.ship !== undefined) {\r\n          const new_tile = JSON.parse(JSON.stringify(tile));\r\n          new_tile.contains.successfulShot = true;\r\n          store.commit(Mutation.SET_PLAYER_TILE, {\r\n            row: row,\r\n            col: col,\r\n            tile: new_tile\r\n          });\r\n\r\n          // If the ship is an aircraft carrier, subtract 1 from its health\r\n          if (tile.ship?.name === ShipName.AIRCRAFT_CARRIER) {\r\n            store.commit(Mutation.SET_PLAYER_AIRCRAFT_CARRIER_HEALTH, store.state.player.aircraftCarrierHealth - 1);\r\n          }\r\n\r\n          // If the ship is a battleship, subtract 1 from its health\r\n          else if (tile.ship?.name === ShipName.BATTLESHIP) {\r\n            store.commit(Mutation.SET_PLAYER_BATTLESHIP_HEALTH, store.state.player.battleshipHealth - 1);\r\n          }\r\n\r\n          // If the ship is a submarine, sink it, as it only has 1 health\r\n          else if (tile.ship?.name === ShipName.SUBMARINE) {\r\n            store.commit(Mutation.SET_PLAYER_HAS_USED_SUBMARINE_ABILITY, true);\r\n          }\r\n\r\n        } else {\r\n          const new_tile = JSON.parse(JSON.stringify(tile));\r\n          new_tile.contains.missedShot = true;\r\n          store.commit(Mutation.SET_PLAYER_TILE, {\r\n            row: row,\r\n            col: col,\r\n            tile: new_tile\r\n          });\r\n        }\r\n\r\n      }\r\n    }\r\n\r\n    // Uncover the battleship\r\n    for (let row = 0; row < computer_board.length; row++) {\r\n      for (let col = 0; col < computer_board[row].length; col++) {\r\n        if (computer_board[row][col].ship?.name === ShipName.BATTLESHIP) {\r\n          const new_tile = JSON.parse(JSON.stringify(computer_board[row][col]));\r\n          new_tile.contains.uncoveredShip = true;\r\n          store.commit(Mutation.SET_COMPUTER_TILE, {\r\n            row: row,\r\n            col: col,\r\n            tile: new_tile\r\n          });\r\n        }\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  // Computer aircraft carrier ability\r\n  else if (store.state.computer.isUsingAircraftCarrierAbility) {\r\n    \r\n    // For each of the computer aircraft carrier's shots\r\n    while (store.state.computer.aircraftCarrierShots != 0) {\r\n      const move = makeRandomValidMove(player_board);\r\n\r\n      // If the square already contains a missed shot, or a successful shot, skip it\r\n      const tile = player_board[move.row][move.col];\r\n      if (tile.contains.missedShot) continue;\r\n      if (tile.contains.successfulShot) continue;\r\n\r\n      const new_tile = JSON.parse(JSON.stringify(tile));\r\n      // If the square contains a ship, hit it\r\n      if (tile.ship !== undefined) {\r\n        new_tile.contains.successfulShot = true;\r\n        store.commit(Mutation.SET_PLAYER_TILE, {\r\n          row: move.row,\r\n          col: move.col,\r\n          tile: new_tile\r\n        });\r\n\r\n        // If the ship is an aircraft carrier, subtract 1 from its health\r\n        if (tile.ship?.name === ShipName.AIRCRAFT_CARRIER) {\r\n          store.commit(Mutation.SET_PLAYER_AIRCRAFT_CARRIER_HEALTH, store.state.player.aircraftCarrierHealth - 1);\r\n        }\r\n\r\n        // If the ship is a battleship, subtract 1 from its health\r\n        else if (tile.ship?.name === ShipName.BATTLESHIP) {\r\n          store.commit(Mutation.SET_PLAYER_BATTLESHIP_HEALTH, store.state.player.battleshipHealth - 1);\r\n        }\r\n\r\n        // If the ship is a submarine, sink it, as it only has 1 health\r\n        else if (tile.ship?.name === ShipName.SUBMARINE) {\r\n          store.commit(Mutation.SET_PLAYER_HAS_USED_SUBMARINE_ABILITY, true);\r\n        }\r\n\r\n      }\r\n\r\n      // Otherwise, mark it as a missed shot\r\n      else {\r\n        new_tile.contains.missedShot = true;\r\n        store.commit(Mutation.SET_PLAYER_TILE, {\r\n          row: move.row,\r\n          col: move.col,\r\n          tile: new_tile\r\n        });\r\n      }\r\n\r\n      // Decrement the number of shots\r\n      store.commit(Mutation.SET_COMPUTER_AIRCRAFT_CARRIER_SHOTS, store.state.computer.aircraftCarrierShots - 1);\r\n\r\n      // Check if the computer won\r\n      let computer_won = true;\r\n      for (let row = 0; row < player_board.length; row++) {\r\n        for (let col = 0; col < player_board[row].length; col++) {\r\n          if (player_board[row][col].ship !== undefined && !player_board[row][col].contains.successfulShot) {\r\n            computer_won = false;\r\n            break\r\n          }\r\n        }\r\n      }\r\n\r\n      // If so, change the state of the game\r\n      if (computer_won) {\r\n        store.commit(Mutation.SET_GAME_IS_IN_PROGRESS, false);\r\n        store.commit(Mutation.SET_COMPUTER_HAS_WON_THE_GAME, true);\r\n        return;\r\n      }\r\n\r\n    }\r\n\r\n    // Uncover the aircraft carrier\r\n    for (let row = 0; row < computer_board.length; row++) {\r\n      for (let col = 0; col < computer_board[row].length; col++) {\r\n        if (computer_board[row][col].ship?.name === ShipName.AIRCRAFT_CARRIER) {\r\n          const new_tile = JSON.parse(JSON.stringify(computer_board[row][col]));\r\n          new_tile.contains.uncoveredShip = true;\r\n          store.commit(Mutation.SET_COMPUTER_TILE, {\r\n            row: row,\r\n            col: col,\r\n            tile: new_tile\r\n          });\r\n        }\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  // Computer normal move\r\n  else {\r\n    const move = makeRandomValidMove(player_board);\r\n    const tile = player_board[move.row][move.col];\r\n\r\n    // Hit the square\r\n    const new_tile = JSON.parse(JSON.stringify(tile));\r\n    if (new_tile.ship !== undefined) {\r\n      new_tile.contains.successfulShot = true;\r\n\r\n      // If the ship is an aircraft carrier, subtract 1 from its health\r\n      if (tile.ship?.name === ShipName.AIRCRAFT_CARRIER) {\r\n        store.commit(Mutation.SET_PLAYER_AIRCRAFT_CARRIER_HEALTH, store.state.player.aircraftCarrierHealth - 1);\r\n      }\r\n\r\n      // If the ship is a battleship, subtract 1 from its health\r\n      else if (tile.ship?.name === ShipName.BATTLESHIP) {\r\n        store.commit(Mutation.SET_PLAYER_BATTLESHIP_HEALTH, store.state.player.battleshipHealth - 1);\r\n      }\r\n\r\n      // If the ship is a submarine, sink it, as it only has 1 health\r\n      else if (tile.ship?.name === ShipName.SUBMARINE) {\r\n        store.commit(Mutation.SET_PLAYER_HAS_USED_SUBMARINE_ABILITY, true);\r\n      }\r\n\r\n    }\r\n    else {\r\n      new_tile.contains.missedShot = true;\r\n    }\r\n\r\n    // Reflect the state of the square\r\n    store.commit(Mutation.SET_PLAYER_TILE, {\r\n      row: move.row,\r\n      col: move.col,\r\n      tile: new_tile\r\n    });\r\n  }\r\n\r\n  // Wait for 1 second (1000 milliseconds)\r\n  await sleep(1000);\r\n\r\n  // Make sure the abilities are consumed after being used\r\n  if (store.state.computer.isUsingAircraftCarrierAbility) {\r\n    store.commit(Mutation.SET_COMPUTER_HAS_USED_AIRCRAFT_CARRIER_ABILITY, true);\r\n    store.commit(Mutation.SET_COMPUTER_IS_USING_AIRCRAFT_CARRIER_ABILITY, false);\r\n  } else if (store.state.computer.isUsingBattleshipAbility) {\r\n    store.commit(Mutation.SET_COMPUTER_HAS_USED_BATTLESHIP_ABILITY, true);\r\n    store.commit(Mutation.SET_COMPUTER_IS_USING_BATTLESHIP_ABILITY, false);\r\n  } else if (store.state.computer.isUsingSubmarineAbility) {\r\n    store.commit(Mutation.SET_COMPUTER_HAS_USED_SUBMARINE_ABILITY, true);\r\n    store.commit(Mutation.SET_COMPUTER_IS_USING_SUBMARINE_ABILITY, false);\r\n  }\r\n\r\n  // Check if either the battleship or the aircraft carrier were sunk\r\n  if (store.state.player.aircraftCarrierHealth === 0) {\r\n    store.commit(Mutation.SET_PLAYER_HAS_USED_AIRCRAFT_CARRIER_ABILITY, true);\r\n  } else if (store.state.player.battleshipHealth === 0) {\r\n    store.commit(Mutation.SET_PLAYER_HAS_USED_BATTLESHIP_ABILITY, true);\r\n  }\r\n\r\n  // Check if the computer won\r\n  let computer_won = true;\r\n  for (let row = 0; row < player_board.length; row++) {\r\n    for (let col = 0; col < player_board[row].length; col++) {\r\n      if (player_board[row][col].ship !== undefined && !player_board[row][col].contains.successfulShot) {\r\n        computer_won = false;\r\n        break\r\n      }\r\n    }\r\n  }\r\n\r\n  // If so, change the state of the game\r\n  if (computer_won) {\r\n    store.commit(Mutation.SET_GAME_IS_IN_PROGRESS, false);\r\n    store.commit(Mutation.SET_COMPUTER_HAS_WON_THE_GAME, true);\r\n    return;\r\n  }\r\n\r\n  // Since the computer's move is over, change the turn\r\n  store.commit(Mutation.SET_COMPUTER_HAS_CURRENT_TURN, false);\r\n  store.commit(Mutation.SET_PLAYER_HAS_CURRENT_TURN, true);\r\n\r\n  // Allow the squares to be clicked again\r\n  store.commit(Mutation.SET_GAME_IS_MOVE_IN_PROGRESS, false);\r\n}\r\n\nreturn (_ctx: any,_cache: any) => {\n  return (_openBlock(), _createElementBlock(\"div\", {\n    class: _normalizeClass(_unref(background)),\n    onClick: Attack\n  }, [\n    _createVNode(Sprite, {\n      tile: __props.tile,\n      isPlayerSquare: false\n    }, null, 8, [\"tile\"])\n  ], 2))\n}\n}\n\n})","import script from \"./EnemySquare.vue?vue&type=script&setup=true&lang=ts\"\nexport * from \"./EnemySquare.vue?vue&type=script&setup=true&lang=ts\"\n\nimport \"./EnemySquare.vue?vue&type=style&index=0&id=6262f771&scoped=true&lang=css\"\n\nimport exportComponent from \"C:\\\\Users\\\\Admin\\\\Desktop\\\\battleship\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-6262f771\"]])\n\nexport default __exports__","import { defineComponent as _defineComponent } from 'vue'\nimport { unref as _unref, createVNode as _createVNode, normalizeClass as _normalizeClass, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\"\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-b815727c\"),n=n(),_popScopeId(),n)\nconst _hoisted_1 = { class: \"ability-button-container\" }\nconst _hoisted_2 = [\"disabled\"]\nconst _hoisted_3 = [\"disabled\"]\nconst _hoisted_4 = [\"disabled\"]\n\nimport { useStore } from '@/store'\r\nimport { Mutation } from '@/store/enums';\r\nimport { computed } from 'vue';\r\n\r\n// SVGs\r\nimport Submarine from '@/components/SVGs/Ships/Submarine.vue';\r\nimport AircraftCarrier from '@/components/SVGs/Ships/AircraftCarrier.vue';\r\nimport Battleship from '@/components/SVGs/Ships/Battleship.vue';\r\n\r\n\r\n\nexport default /*#__PURE__*/_defineComponent({\n  __name: 'AbilityButtons',\n  setup(__props) {\n\r\nconst store = useStore()\r\n\r\nconst isSubmarineAbilityButtonDisabled = computed(() => {\r\n  return (\r\n    store.state.computer.hasCurrentTurn\r\n    || store.state.player.hasUsedSubmarineAbility\r\n    || store.state.player.isUsingSubmarineAbility\r\n    || store.state.player.isUsingAircraftCarrierAbility\r\n    || store.state.player.isUsingBattleshipAbility\r\n  )\r\n})\r\n\r\nconst isAircraftCarrierAbilityButtonDisabled = computed(() => {\r\n  return (\r\n    store.state.computer.hasCurrentTurn\r\n    || store.state.player.hasUsedAircraftCarrierAbility\r\n    || store.state.player.isUsingSubmarineAbility\r\n    || store.state.player.isUsingAircraftCarrierAbility\r\n    || store.state.player.isUsingBattleshipAbility\r\n  )\r\n})\r\n\r\nconst isBattleshipAbilityButtonDisabled = computed(() => {\r\n  return (\r\n    store.state.computer.hasCurrentTurn\r\n    || store.state.player.hasUsedBattleshipAbility\r\n    || store.state.player.isUsingSubmarineAbility\r\n    || store.state.player.isUsingAircraftCarrierAbility\r\n    || store.state.player.isUsingBattleshipAbility\r\n  )\r\n})\r\n\nreturn (_ctx: any,_cache: any) => {\n  return (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [\n    _createElementVNode(\"button\", {\n      disabled: _unref(isSubmarineAbilityButtonDisabled),\n      onClick: _cache[0] || (_cache[0] = ($event: any) => (_unref(store).commit(_unref(Mutation).SET_PLAYER_IS_USING_SUBMARINE_ABILITY, true))),\n      class: _normalizeClass(['ability-button', _unref(store).state.player.isUsingSubmarineAbility ? 'highlighted' : ''])\n    }, [\n      _createVNode(Submarine, { class: \"ability-icon\" })\n    ], 10, _hoisted_2),\n    _createElementVNode(\"button\", {\n      disabled: _unref(isAircraftCarrierAbilityButtonDisabled),\n      onClick: _cache[1] || (_cache[1] = ($event: any) => (_unref(store).commit(_unref(Mutation).SET_PLAYER_IS_USING_AIRCRAFT_CARRIER_ABILITY, true))),\n      class: _normalizeClass(['ability-button', _unref(store).state.player.isUsingAircraftCarrierAbility ? 'highlighted' : ''])\n    }, [\n      _createVNode(AircraftCarrier, { class: \"ability-icon\" })\n    ], 10, _hoisted_3),\n    _createElementVNode(\"button\", {\n      disabled: _unref(isBattleshipAbilityButtonDisabled),\n      onClick: _cache[2] || (_cache[2] = ($event: any) => (_unref(store).commit(_unref(Mutation).SET_PLAYER_IS_USING_BATTLESHIP_ABILITY, true))),\n      class: _normalizeClass(['ability-button', _unref(store).state.player.isUsingBattleshipAbility ? 'highlighted' : ''])\n    }, [\n      _createVNode(Battleship, { class: \"ability-icon\" })\n    ], 10, _hoisted_4)\n  ]))\n}\n}\n\n})","import script from \"./AbilityButtons.vue?vue&type=script&lang=ts&setup=true\"\nexport * from \"./AbilityButtons.vue?vue&type=script&lang=ts&setup=true\"\n\nimport \"./AbilityButtons.vue?vue&type=style&index=0&id=b815727c&scoped=true&lang=css\"\n\nimport exportComponent from \"C:\\\\Users\\\\Admin\\\\Desktop\\\\battleship\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-b815727c\"]])\n\nexport default __exports__","import { defineComponent as _defineComponent } from 'vue'\nimport { unref as _unref, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\"\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-6aa582e4\"),n=n(),_popScopeId(),n)\nconst _hoisted_1 = { class: \"winner-modal\" }\nconst _hoisted_2 = { class: \"winner-modal-content\" }\nconst _hoisted_3 = { key: 0 }\nconst _hoisted_4 = { key: 1 }\n\nimport { useStore } from '@/store'\r\nimport { useRouter } from 'vue-router';\r\nimport { Mutation } from '@/store/enums';\r\n\r\n\r\n\nexport default /*#__PURE__*/_defineComponent({\n  __name: 'MatchResultModal',\n  setup(__props) {\n\r\nconst store = useStore();\r\nconst router = useRouter();\r\n\r\n/**\r\n * Resets the root state to the initial state and redirects to the home page\r\n */\r\nfunction newGame() {\r\n  store.commit(Mutation.SET_GAME_IS_IN_PROGRESS, false);\r\n  store.commit(Mutation.SET_GAME_MAP_NAME, undefined);\r\n  store.commit(Mutation.SET_GAME_IS_MOVE_IN_PROGRESS, false);\r\n\r\n  store.commit(Mutation.SET_GUI_SUBMARINE_COUNT, 0);\r\n  store.commit(Mutation.SET_GUI_SUPPLY_BOAT_COUNT, 0);\r\n  store.commit(Mutation.SET_GUI_DESTROYER_COUNT, 0);\r\n  store.commit(Mutation.SET_GUI_BATTLESHIP_COUNT, 0);\r\n  store.commit(Mutation.SET_GUI_AIRCRAFT_CARRIER_COUNT, 0);\r\n\r\n  store.commit(Mutation.SET_PLAYER_IS_USING_SUBMARINE_ABILITY, false)\r\n  store.commit(Mutation.SET_PLAYER_IS_USING_AIRCRAFT_CARRIER_ABILITY, false)\r\n  store.commit(Mutation.SET_PLAYER_IS_USING_BATTLESHIP_ABILITY, false)\r\n\r\n  store.commit(Mutation.SET_PLAYER_HAS_USED_SUBMARINE_ABILITY, false)\r\n  store.commit(Mutation.SET_PLAYER_HAS_USED_AIRCRAFT_CARRIER_ABILITY, false)\r\n  store.commit(Mutation.SET_PLAYER_HAS_USED_BATTLESHIP_ABILITY, false)\r\n\r\n  store.commit(Mutation.SET_PLAYER_AIRCRAFT_CARRIER_HEALTH, 10)\r\n  store.commit(Mutation.SET_PLAYER_BATTLESHIP_HEALTH, 4)\r\n\r\n  store.commit(Mutation.SET_PLAYER_AIRCRAFT_CARRIER_SHOTS, 0)\r\n\r\n  store.commit(Mutation.SET_PLAYER_HAS_CURRENT_TURN, false)\r\n  store.commit(Mutation.SET_PLAYER_HAS_WON_THE_GAME, false)\r\n\r\n  store.commit(Mutation.SET_PLAYER_BOARD, [[]])\r\n\r\n  store.commit(Mutation.SET_COMPUTER_IS_USING_SUBMARINE_ABILITY, false)\r\n  store.commit(Mutation.SET_COMPUTER_IS_USING_AIRCRAFT_CARRIER_ABILITY, false)\r\n  store.commit(Mutation.SET_COMPUTER_IS_USING_BATTLESHIP_ABILITY, false)\r\n\r\n  store.commit(Mutation.SET_COMPUTER_HAS_USED_SUBMARINE_ABILITY, false)\r\n  store.commit(Mutation.SET_COMPUTER_HAS_USED_AIRCRAFT_CARRIER_ABILITY, false)\r\n  store.commit(Mutation.SET_COMPUTER_HAS_USED_BATTLESHIP_ABILITY, false)\r\n\r\n  store.commit(Mutation.SET_COMPUTER_AIRCRAFT_CARRIER_HEALTH, 10)\r\n  store.commit(Mutation.SET_COMPUTER_BATTLESHIP_HEALTH, 4)\r\n\r\n  store.commit(Mutation.SET_COMPUTER_AIRCRAFT_CARRIER_SHOTS, 0)\r\n\r\n  store.commit(Mutation.SET_COMPUTER_HAS_CURRENT_TURN, false)\r\n  store.commit(Mutation.SET_COMPUTER_HAS_WON_THE_GAME, false)\r\n\r\n  store.commit(Mutation.SET_COMPUTER_BOARD, [[]])\r\n\r\n  router.push({ name: 'Index' })\r\n}\r\n\nreturn (_ctx: any,_cache: any) => {\n  return (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [\n    _createElementVNode(\"div\", _hoisted_2, [\n      (_unref(store).state.player.hasWonTheGame)\n        ? (_openBlock(), _createElementBlock(\"h2\", _hoisted_3, \" You Win! \"))\n        : (_unref(store).state.computer.hasWonTheGame)\n          ? (_openBlock(), _createElementBlock(\"h2\", _hoisted_4, \" You Lose! \"))\n          : _createCommentVNode(\"\", true),\n      _createElementVNode(\"button\", { onClick: newGame }, \" New Game \")\n    ])\n  ]))\n}\n}\n\n})","import script from \"./MatchResultModal.vue?vue&type=script&lang=ts&setup=true\"\nexport * from \"./MatchResultModal.vue?vue&type=script&lang=ts&setup=true\"\n\nimport \"./MatchResultModal.vue?vue&type=style&index=0&id=6aa582e4&scoped=true&lang=css\"\n\nimport exportComponent from \"C:\\\\Users\\\\Admin\\\\Desktop\\\\battleship\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-6aa582e4\"]])\n\nexport default __exports__","import { defineComponent as _defineComponent } from 'vue'\nimport { unref as _unref, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, createElementBlock as _createElementBlock, createVNode as _createVNode, toDisplayString as _toDisplayString, normalizeClass as _normalizeClass, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\"\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-f6efe1da\"),n=n(),_popScopeId(),n)\nconst _hoisted_1 = { class: \"container\" }\nconst _hoisted_2 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"h1\", null, \" Battleship Game \", -1))\nconst _hoisted_3 = { class: \"boards\" }\nconst _hoisted_4 = { class: \"board-wrapper\" }\nconst _hoisted_5 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"h2\", null, \" Enemy Board \", -1))\nconst _hoisted_6 = { class: \"board\" }\nconst _hoisted_7 = { class: \"board-wrapper\" }\nconst _hoisted_8 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"h2\", null, \" Player Board \", -1))\nconst _hoisted_9 = { class: \"board\" }\nconst _hoisted_10 = { class: \"gui\" }\nconst _hoisted_11 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"h2\", null, \" GUI \", -1))\nconst _hoisted_12 = { key: 0 }\nconst _hoisted_13 = { key: 1 }\nconst _hoisted_14 = { key: 2 }\nconst _hoisted_15 = { key: 3 }\nconst _hoisted_16 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"h3\", null, \" Click to use an ability \", -1))\nconst _hoisted_17 = {\n  key: 5,\n  class: \"ability-button-container\"\n}\nconst _hoisted_18 = [\"disabled\"]\nconst _hoisted_19 = [\"disabled\"]\nconst _hoisted_20 = [\"disabled\"]\n\nimport PlayerSquare from '@/components/PlayerSquare.vue';\r\nimport EnemySquare from '@/components/EnemySquare.vue';\r\nimport AbilityButtons from '@/components/AbilityButtons.vue';\r\nimport MatchResultModal from '@/components/MatchResultModal.vue';\r\nimport { useStore } from '@/store'\r\nimport { computed } from 'vue';\r\n\r\n// SVGs\r\nimport Submarine from '@/components/SVGs/Ships/Submarine.vue';\r\nimport AircraftCarrier from '@/components/SVGs/Ships/AircraftCarrier.vue';\r\nimport Battleship from '@/components/SVGs/Ships/Battleship.vue';\r\n\r\n\r\n\nexport default /*#__PURE__*/_defineComponent({\n  __name: 'Game',\n  setup(__props) {\n\r\nconst store = useStore()\r\n\r\nconst selectedPlayerAbility = computed(() => {\r\n  if (store.state.player.isUsingAircraftCarrierAbility) return 'Aircraft Carrier Attack';\r\n  if (store.state.player.isUsingBattleshipAbility) return 'Battleship Attack';\r\n  if (store.state.player.isUsingSubmarineAbility) return 'Submarine Attack';\r\n  return 'Normal Attack';\r\n});\r\n\r\nconst selectedComputerAbility = computed(() => {\r\n  if (store.state.computer.isUsingAircraftCarrierAbility) return 'Aircraft Carrier Attack';\r\n  if (store.state.computer.isUsingBattleshipAbility) return 'Battleship Attack';\r\n  if (store.state.computer.isUsingSubmarineAbility) return 'Submarine Attack';\r\n  return 'Normal Attack';\r\n});\r\n\r\nconst isSubmarineAbilityButtonDisabled = computed(() => {\r\n  return (\r\n    store.state.player.hasCurrentTurn\r\n    || store.state.computer.hasUsedSubmarineAbility\r\n    || store.state.computer.isUsingSubmarineAbility\r\n    || store.state.computer.isUsingAircraftCarrierAbility\r\n    || store.state.computer.isUsingBattleshipAbility\r\n  )\r\n})\r\n\r\nconst isAircraftCarrierAbilityButtonDisabled = computed(() => {\r\n  return (\r\n    store.state.player.hasCurrentTurn\r\n    || store.state.computer.hasUsedAircraftCarrierAbility\r\n    || store.state.computer.isUsingSubmarineAbility\r\n    || store.state.computer.isUsingAircraftCarrierAbility\r\n    || store.state.computer.isUsingBattleshipAbility\r\n  )\r\n})\r\n\r\nconst isBattleshipAbilityButtonDisabled = computed(() => {\r\n  return (\r\n    store.state.player.hasCurrentTurn\r\n    || store.state.computer.hasUsedBattleshipAbility\r\n    || store.state.computer.isUsingSubmarineAbility\r\n    || store.state.computer.isUsingAircraftCarrierAbility\r\n    || store.state.computer.isUsingBattleshipAbility\r\n  )\r\n})\r\n\nreturn (_ctx: any,_cache: any) => {\n  return (_openBlock(), _createElementBlock(_Fragment, null, [\n    (_unref(store).state.player.hasWonTheGame || _unref(store).state.computer.hasWonTheGame)\n      ? (_openBlock(), _createBlock(MatchResultModal, { key: 0 }))\n      : _createCommentVNode(\"\", true),\n    _createElementVNode(\"div\", _hoisted_1, [\n      _hoisted_2,\n      _createElementVNode(\"div\", _hoisted_3, [\n        _createElementVNode(\"div\", _hoisted_4, [\n          _hoisted_5,\n          _createElementVNode(\"div\", _hoisted_6, [\n            (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_unref(store).state.computer.board, (row, rowIndex) => {\n              return (_openBlock(), _createElementBlock(\"div\", {\n                key: rowIndex,\n                class: \"board-row\"\n              }, [\n                (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(row, (col, colIndex) => {\n                  return (_openBlock(), _createElementBlock(\"div\", {\n                    key: colIndex,\n                    class: \"board-cell\"\n                  }, [\n                    _createVNode(EnemySquare, {\n                      tile: col,\n                      row: rowIndex,\n                      col: colIndex\n                    }, null, 8, [\"tile\", \"row\", \"col\"])\n                  ]))\n                }), 128))\n              ]))\n            }), 128))\n          ])\n        ]),\n        _createElementVNode(\"div\", _hoisted_7, [\n          _hoisted_8,\n          _createElementVNode(\"div\", _hoisted_9, [\n            (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_unref(store).state.player.board, (row, rowIndex) => {\n              return (_openBlock(), _createElementBlock(\"div\", {\n                key: rowIndex,\n                class: \"board-row\"\n              }, [\n                (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(row, (col, colIndex) => {\n                  return (_openBlock(), _createElementBlock(\"div\", {\n                    key: colIndex,\n                    class: \"board-cell\"\n                  }, [\n                    _createVNode(PlayerSquare, {\n                      tile: col,\n                      row: rowIndex,\n                      col: colIndex\n                    }, null, 8, [\"tile\", \"row\", \"col\"])\n                  ]))\n                }), 128))\n              ]))\n            }), 128))\n          ])\n        ])\n      ]),\n      _createElementVNode(\"div\", _hoisted_10, [\n        _hoisted_11,\n        (_unref(store).state.player.hasCurrentTurn)\n          ? (_openBlock(), _createElementBlock(\"h3\", _hoisted_12, \" Your Turn \"))\n          : (_openBlock(), _createElementBlock(\"h3\", _hoisted_13, \" Enemy's Turn \")),\n        (_unref(store).state.player.hasCurrentTurn)\n          ? (_openBlock(), _createElementBlock(\"div\", _hoisted_14, [\n              _createElementVNode(\"h3\", null, \" Current Attack Type: \" + _toDisplayString(_unref(selectedPlayerAbility)), 1)\n            ]))\n          : (_unref(store).state.computer.hasCurrentTurn)\n            ? (_openBlock(), _createElementBlock(\"div\", _hoisted_15, [\n                _createElementVNode(\"h3\", null, \" Current Attack Type: \" + _toDisplayString(_unref(selectedComputerAbility)), 1)\n              ]))\n            : _createCommentVNode(\"\", true),\n        _hoisted_16,\n        (_unref(store).state.player.hasCurrentTurn)\n          ? (_openBlock(), _createBlock(AbilityButtons, { key: 4 }))\n          : (_unref(store).state.computer.hasCurrentTurn)\n            ? (_openBlock(), _createElementBlock(\"div\", _hoisted_17, [\n                _createElementVNode(\"button\", {\n                  disabled: _unref(isSubmarineAbilityButtonDisabled),\n                  class: _normalizeClass(['ability-button', _unref(store).state.computer.isUsingSubmarineAbility ? 'highlighted' : ''])\n                }, [\n                  _createVNode(Submarine, { class: \"ability-icon\" })\n                ], 10, _hoisted_18),\n                _createElementVNode(\"button\", {\n                  disabled: _unref(isAircraftCarrierAbilityButtonDisabled),\n                  class: _normalizeClass(['ability-button', _unref(store).state.computer.isUsingAircraftCarrierAbility ? 'highlighted' : ''])\n                }, [\n                  _createVNode(AircraftCarrier, { class: \"ability-icon\" })\n                ], 10, _hoisted_19),\n                _createElementVNode(\"button\", {\n                  disabled: _unref(isBattleshipAbilityButtonDisabled),\n                  class: _normalizeClass(['ability-button', _unref(store).state.computer.isUsingBattleshipAbility ? 'highlighted' : ''])\n                }, [\n                  _createVNode(Battleship, { class: \"ability-icon\" })\n                ], 10, _hoisted_20)\n              ]))\n            : _createCommentVNode(\"\", true)\n      ])\n    ])\n  ], 64))\n}\n}\n\n})","import script from \"./Game.vue?vue&type=script&lang=ts&setup=true\"\nexport * from \"./Game.vue?vue&type=script&lang=ts&setup=true\"\n\nimport \"./Game.vue?vue&type=style&index=0&id=f6efe1da&scoped=true&lang=css\"\n\nimport exportComponent from \"C:\\\\Users\\\\Admin\\\\Desktop\\\\battleship\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-f6efe1da\"]])\n\nexport default __exports__"],"names":["_defineComponent","__name","props","tile","row","col","setup","__props","store","useStore","background","computed","isWater","isLand","isOutOfBounds","sleep","ms","Promise","resolve","setTimeout","async","Attack","state","computer","hasCurrentTurn","game","isMoveInProgress","computer_board","board","player_board","player","isInvalidSquare","commit","Mutation","isUsingSubmarineAbility","undefined","ship","new_tile","JSON","parse","stringify","contains","uncoveredShip","missedShot","successfulShot","length","name","ShipName","isUsingBattleshipAbility","aircraftCarrierHealth","battleshipHealth","isUsingAircraftCarrierAbility","aircraftCarrierShots","player_won","hasUsedAircraftCarrierAbility","hasUsedBattleshipAbility","hasUsedSubmarineAbility","move","makeRandomValidMove","computer_won","_ctx","_cache","_openBlock","_createElementBlock","class","_normalizeClass","_unref","onClick","_createVNode","Sprite","isPlayerSquare","__exports__","_hoisted_1","_hoisted_2","_hoisted_3","_hoisted_4","isSubmarineAbilityButtonDisabled","isAircraftCarrierAbilityButtonDisabled","isBattleshipAbilityButtonDisabled","_createElementVNode","disabled","$event","SET_PLAYER_IS_USING_SUBMARINE_ABILITY","Submarine","SET_PLAYER_IS_USING_AIRCRAFT_CARRIER_ABILITY","AircraftCarrier","SET_PLAYER_IS_USING_BATTLESHIP_ABILITY","Battleship","key","router","useRouter","newGame","push","hasWonTheGame","_createCommentVNode","_withScopeId","n","_pushScopeId","_popScopeId","_hoisted_5","_hoisted_6","_hoisted_7","_hoisted_8","_hoisted_9","_hoisted_10","_hoisted_11","_hoisted_12","_hoisted_13","_hoisted_14","_hoisted_15","_hoisted_16","_hoisted_17","_hoisted_18","_hoisted_19","_hoisted_20","selectedPlayerAbility","selectedComputerAbility","_Fragment","_createBlock","MatchResultModal","_renderList","rowIndex","colIndex","EnemySquare","PlayerSquare","_toDisplayString","AbilityButtons"],"sourceRoot":""}