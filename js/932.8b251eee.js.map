{"version":3,"file":"js/932.8b251eee.js","mappings":"oPAkBA,GAA4BA,EAAAA,EAAAA,IAAiB,CAC3CC,OAAQ,cACRC,MAAO,CACLC,KAAM,KACNC,IAAK,KACLC,IAAK,MAEPC,MAAMC,GAER,MAAML,EAAQK,EAORC,GAAQC,EAAAA,EAAAA,MAERC,GAAaC,EAAAA,EAAAA,KAAS,IACtBT,EAAMC,KAAKO,WAAWE,QAAgB,QACtCV,EAAMC,KAAKO,WAAWG,OAAe,OACrCX,EAAMC,KAAKO,WAAWI,cAAsB,qBAAhD,IAGF,SAASC,IACP,GAAIP,EAAMQ,MAAMC,SAASC,eAAgB,OACzC,MAAMC,EAAiBX,EAAMQ,MAAMC,SAASG,MACtCC,EAAeb,EAAMQ,MAAMM,OAAOF,MACxC,IAAIG,EAAAA,EAAAA,IAAgBrB,EAAME,IAAKF,EAAMG,IAAKc,GAAiB,OAG3D,GAAIX,EAAMQ,MAAMM,OAAOE,wBAAyB,CAG9C,IAAK,IAAIpB,EAAMF,EAAME,IAAM,EAAGA,GAAOF,EAAME,IAAM,EAAGA,IAClD,IAAK,IAAIC,EAAMH,EAAMG,IAAM,EAAGA,GAAOH,EAAMG,IAAM,EAAGA,IAAO,CAGzD,IAAIkB,EAAAA,EAAAA,IAAgBnB,EAAKC,EAAKc,GAAiB,SAG/C,MAAMhB,EAAOgB,EAAef,GAAKC,GACjC,QAAkBoB,IAAdtB,EAAKuB,KAAoB,CAC3B,MAAMC,EAAWC,KAAKC,MAAMD,KAAKE,UAAU3B,IAC3CwB,EAASI,SAASC,eAAgB,EAClCxB,EAAMyB,OAAOC,EAAAA,GAAAA,kBAA4B,CACvC9B,IAAKA,EACLC,IAAKA,EACLF,KAAMwB,G,KAKL,CAGH,GAAIxB,EAAK4B,SAASI,WAAY,SAC9B,GAAIhC,EAAK4B,SAASK,eAAgB,SAClC,GAAIjC,EAAK4B,SAASC,cAAe,SAEjC,MAAML,EAAWC,KAAKC,MAAMD,KAAKE,UAAU3B,IAC3CwB,EAASI,SAASI,YAAa,EAC/B3B,EAAMyB,OAAOC,EAAAA,GAAAA,kBAA4B,CACvC9B,IAAKA,EACLC,IAAKA,EACLF,KAAMwB,G,EAQd,IAAK,IAAIvB,EAAM,EAAGA,EAAMiB,EAAagB,OAAQjC,IAC3C,IAAK,IAAIC,EAAM,EAAGA,EAAMgB,EAAajB,GAAKiC,OAAQhC,IAChD,GAAIgB,EAAajB,GAAKC,GAAKqB,MAAMY,OAASC,EAAAA,GAAAA,UAAoB,CAC5D,MAAMZ,EAAWC,KAAKC,MAAMD,KAAKE,UAAUT,EAAajB,GAAKC,KAC7DsB,EAASI,SAASC,eAAgB,EAClCxB,EAAMyB,OAAOC,EAAAA,GAAAA,gBAA0B,CACrC9B,IAAKA,EACLC,IAAKA,EACLF,KAAMwB,G,CAOdnB,EAAMyB,OAAOC,EAAAA,GAAAA,uCAAgD,GAC7D1B,EAAMyB,OAAOC,EAAAA,GAAAA,uCAAgD,E,MAK1D,GAAI1B,EAAMQ,MAAMM,OAAOkB,yBAA0B,CAGpD,IAAK,IAAIpC,EAAMF,EAAME,IAAM,EAAGA,GAAOF,EAAME,IAAM,EAAGA,IAClD,IAAK,IAAIC,EAAMH,EAAMG,IAAM,EAAGA,GAAOH,EAAMG,IAAM,EAAGA,IAAO,CAGzD,IAAIkB,EAAAA,EAAAA,IAAgBnB,EAAKC,EAAKc,GAAiB,SAG/C,MAAMhB,EAAOgB,EAAef,GAAKC,GACjC,QAAkBoB,IAAdtB,EAAKuB,KAAoB,CAC3B,MAAMC,EAAWC,KAAKC,MAAMD,KAAKE,UAAU3B,IAC3CwB,EAASI,SAASK,gBAAiB,EACnC5B,EAAMyB,OAAOC,EAAAA,GAAAA,kBAA4B,CACvC9B,IAAKA,EACLC,IAAKA,EACLF,KAAMwB,IAIJxB,EAAKuB,MAAMY,OAASC,EAAAA,GAAAA,iBACtB/B,EAAMyB,OAAOC,EAAAA,GAAAA,qCAA+C1B,EAAMQ,MAAMC,SAASwB,sBAAwB,GAIlGtC,EAAKuB,MAAMY,OAASC,EAAAA,GAAAA,WAC3B/B,EAAMyB,OAAOC,EAAAA,GAAAA,+BAAyC1B,EAAMQ,MAAMC,SAASyB,iBAAmB,GAIvFvC,EAAKuB,MAAMY,OAASC,EAAAA,GAAAA,WAC3B/B,EAAMyB,OAAOC,EAAAA,GAAAA,yCAAkD,E,KAM9D,CACH,MAAMP,EAAWC,KAAKC,MAAMD,KAAKE,UAAU3B,IAC3CwB,EAASI,SAASI,YAAa,EAC/B3B,EAAMyB,OAAOC,EAAAA,GAAAA,kBAA4B,CACvC9B,IAAKA,EACLC,IAAKA,EACLF,KAAMwB,G,EAQd,IAAK,IAAIvB,EAAM,EAAGA,EAAMiB,EAAagB,OAAQjC,IAC3C,IAAK,IAAIC,EAAM,EAAGA,EAAMgB,EAAajB,GAAKiC,OAAQhC,IAChD,GAAIgB,EAAajB,GAAKC,GAAKqB,MAAMY,OAASC,EAAAA,GAAAA,WAAqB,CAC7D,MAAMZ,EAAWC,KAAKC,MAAMD,KAAKE,UAAUT,EAAajB,GAAKC,KAC7DsB,EAASI,SAASC,eAAgB,EAClCxB,EAAMyB,OAAOC,EAAAA,GAAAA,gBAA0B,CACrC9B,IAAKA,EACLC,IAAKA,EACLF,KAAMwB,G,CAOdnB,EAAMyB,OAAOC,EAAAA,GAAAA,wCAAiD,GAC9D1B,EAAMyB,OAAOC,EAAAA,GAAAA,wCAAiD,E,MAI3D,GAAI1B,EAAMQ,MAAMM,OAAOqB,8BAA+B,CACzD,MAAMxC,EAAOgB,EAAejB,EAAME,KAAKF,EAAMG,KAGvCsB,EAAWC,KAAKC,MAAMD,KAAKE,UAAU3B,SACrBsB,IAAlBE,EAASD,MACXC,EAASI,SAASK,gBAAiB,EAG/BjC,EAAKuB,MAAMY,OAASC,EAAAA,GAAAA,iBACtB/B,EAAMyB,OAAOC,EAAAA,GAAAA,qCAA+C1B,EAAMQ,MAAMC,SAASwB,sBAAwB,GAIlGtC,EAAKuB,MAAMY,OAASC,EAAAA,GAAAA,WAC3B/B,EAAMyB,OAAOC,EAAAA,GAAAA,+BAAyC1B,EAAMQ,MAAMC,SAASyB,iBAAmB,GAIvFvC,EAAKuB,MAAMY,OAASC,EAAAA,GAAAA,WAC3B/B,EAAMyB,OAAOC,EAAAA,GAAAA,yCAAkD,IAKjEP,EAASI,SAASI,YAAa,EAIjC3B,EAAMyB,OAAOC,EAAAA,GAAAA,kBAA4B,CACvC9B,IAAKF,EAAME,IACXC,IAAKH,EAAMG,IACXF,KAAMwB,IAIRnB,EAAMyB,OAAOC,EAAAA,GAAAA,kCAA4C1B,EAAMQ,MAAMM,OAAOsB,qBAAuB,GAGnG,IAAIC,GAAa,EACjB,IAAK,IAAIzC,EAAM,EAAGA,EAAMe,EAAekB,OAAQjC,IAC7C,IAAK,IAAIC,EAAM,EAAGA,EAAMc,EAAef,GAAKiC,OAAQhC,IAClD,QAAsCoB,IAAlCN,EAAef,GAAKC,GAAKqB,OAAuBP,EAAef,GAAKC,GAAK0B,SAASK,eAAgB,CACpGS,GAAa,EACb,K,CAMN,GAAIA,EAGF,OAFArC,EAAMyB,OAAOC,EAAAA,GAAAA,yBAAkC,QAC/C1B,EAAMyB,OAAOC,EAAAA,GAAAA,6BAAsC,GAKrD,GAAI1B,EAAMQ,MAAMM,OAAOsB,qBAAuB,EAAG,OAGjD,IAAK,IAAIxC,EAAM,EAAGA,EAAMiB,EAAagB,OAAQjC,IAC3C,IAAK,IAAIC,EAAM,EAAGA,EAAMgB,EAAajB,GAAKiC,OAAQhC,IAChD,GAAIgB,EAAajB,GAAKC,GAAKqB,MAAMY,OAASC,EAAAA,GAAAA,iBAA2B,CACnE,MAAMZ,EAAWC,KAAKC,MAAMD,KAAKE,UAAUT,EAAajB,GAAKC,KAC7DsB,EAASI,SAASC,eAAgB,EAClCxB,EAAMyB,OAAOC,EAAAA,GAAAA,gBAA0B,CACrC9B,IAAKA,EACLC,IAAKA,EACLF,KAAMwB,G,CAOdnB,EAAMyB,OAAOC,EAAAA,GAAAA,8CAAuD,GACpE1B,EAAMyB,OAAOC,EAAAA,GAAAA,8CAAuD,E,KAIjE,CACH,MAAM/B,EAAOgB,EAAejB,EAAME,KAAKF,EAAMG,KAGvCsB,EAAWC,KAAKC,MAAMD,KAAKE,UAAU3B,SACrBsB,IAAlBE,EAASD,MACXC,EAASI,SAASK,gBAAiB,EAG/BjC,EAAKuB,MAAMY,OAASC,EAAAA,GAAAA,iBACtB/B,EAAMyB,OAAOC,EAAAA,GAAAA,qCAA+C1B,EAAMQ,MAAMC,SAASwB,sBAAwB,GAIlGtC,EAAKuB,MAAMY,OAASC,EAAAA,GAAAA,WAC3B/B,EAAMyB,OAAOC,EAAAA,GAAAA,+BAAyC1B,EAAMQ,MAAMC,SAASyB,iBAAmB,GAIvFvC,EAAKuB,MAAMY,OAASC,EAAAA,GAAAA,WAC3B/B,EAAMyB,OAAOC,EAAAA,GAAAA,yCAAkD,IAKjEP,EAASI,SAASI,YAAa,EAIjC3B,EAAMyB,OAAOC,EAAAA,GAAAA,kBAA4B,CACvC9B,IAAKF,EAAME,IACXC,IAAKH,EAAMG,IACXF,KAAMwB,G,CAMyC,IAA/CnB,EAAMQ,MAAMC,SAASwB,sBACvBjC,EAAMyB,OAAOC,EAAAA,GAAAA,gDAAyD,GACnB,IAA1C1B,EAAMQ,MAAMC,SAASyB,kBAC9BlC,EAAMyB,OAAOC,EAAAA,GAAAA,0CAAmD,GAIlE,IAAIW,GAAa,EACjB,IAAK,IAAIzC,EAAM,EAAGA,EAAMe,EAAekB,OAAQjC,IAC7C,IAAK,IAAIC,EAAM,EAAGA,EAAMc,EAAef,GAAKiC,OAAQhC,IAClD,QAAsCoB,IAAlCN,EAAef,GAAKC,GAAKqB,OAAuBP,EAAef,GAAKC,GAAK0B,SAASK,eAAgB,CACpGS,GAAa,EACb,K,CAMN,GAAIA,EAGF,OAFArC,EAAMyB,OAAOC,EAAAA,GAAAA,yBAAkC,QAC/C1B,EAAMyB,OAAOC,EAAAA,GAAAA,6BAAsC,GAkBrD,GAbA1B,EAAMyB,OAAOC,EAAAA,GAAAA,6BAAsC,GACnD1B,EAAMyB,OAAOC,EAAAA,GAAAA,+BAAwC,GAGhD1B,EAAMQ,MAAMC,SAAS6B,8BAEdtC,EAAMQ,MAAMC,SAAS8B,yBAErBvC,EAAMQ,MAAMC,SAAS+B,yBAC/BxC,EAAMyB,OAAOC,EAAAA,GAAAA,yCAAkD,GAF/D1B,EAAMyB,OAAOC,EAAAA,GAAAA,0CAAmD,GAFhE1B,EAAMyB,OAAOC,EAAAA,GAAAA,gDAAyD,GAQpE1B,EAAMQ,MAAMC,SAASO,wBAAyB,CAChD,MAAMyB,GAAOC,EAAAA,EAAAA,IAAoB7B,GAGjC,IAAK,IAAIjB,EAAM6C,EAAK7C,IAAM,EAAGA,GAAO6C,EAAK7C,IAAM,EAAGA,IAChD,IAAK,IAAIC,EAAM4C,EAAK5C,IAAM,EAAGA,GAAO4C,EAAK5C,IAAM,EAAGA,IAAO,CAGvD,IAAIkB,EAAAA,EAAAA,IAAgBnB,EAAKC,EAAKgB,GAAe,SAG7C,MAAMlB,EAAOkB,EAAajB,GAAKC,GAC/B,QAAkBoB,IAAdtB,EAAKuB,KAAoB,CAC3B,MAAMC,EAAWC,KAAKC,MAAMD,KAAKE,UAAU3B,IAC3CwB,EAASI,SAASC,eAAgB,EAClCxB,EAAMyB,OAAOC,EAAAA,GAAAA,gBAA0B,CACrC9B,IAAKA,EACLC,IAAKA,EACLF,KAAMwB,G,KAKL,CAGH,GAAIxB,EAAK4B,SAASI,WAAY,SAC9B,GAAIhC,EAAK4B,SAASK,eAAgB,SAClC,GAAIjC,EAAK4B,SAASC,cAAe,SAEjC,MAAML,EAAWC,KAAKC,MAAMD,KAAKE,UAAU3B,IAC3CwB,EAASI,SAASI,YAAa,EAC/B3B,EAAMyB,OAAOC,EAAAA,GAAAA,gBAA0B,CACrC9B,IAAKA,EACLC,IAAKA,EACLF,KAAMwB,G,EAQd,IAAK,IAAIvB,EAAM,EAAGA,EAAMe,EAAekB,OAAQjC,IAC7C,IAAK,IAAIC,EAAM,EAAGA,EAAMc,EAAef,GAAKiC,OAAQhC,IAClD,GAAIc,EAAef,GAAKC,GAAKqB,MAAMY,OAASC,EAAAA,GAAAA,UAAoB,CAC9D,MAAMZ,EAAWC,KAAKC,MAAMD,KAAKE,UAAUX,EAAef,GAAKC,KAC/DsB,EAASI,SAASC,eAAgB,EAClCxB,EAAMyB,OAAOC,EAAAA,GAAAA,kBAA4B,CACvC9B,IAAKA,EACLC,IAAKA,EACLF,KAAMwB,G,CAOdnB,EAAMyB,OAAOC,EAAAA,GAAAA,yCAAkD,GAC/D1B,EAAMyB,OAAOC,EAAAA,GAAAA,yCAAkD,E,MAK5D,GAAI1B,EAAMQ,MAAMC,SAASuB,yBAA0B,CACtD,MAAMS,GAAOC,EAAAA,EAAAA,IAAoB7B,GAGjC,IAAK,IAAIjB,EAAM6C,EAAK7C,IAAM,EAAGA,GAAO6C,EAAK7C,IAAM,EAAGA,IAChD,IAAK,IAAIC,EAAM4C,EAAK5C,IAAM,EAAGA,GAAO4C,EAAK5C,IAAM,EAAGA,IAAO,CAGvD,IAAIkB,EAAAA,EAAAA,IAAgBnB,EAAKC,EAAKgB,GAAe,SAG7C,MAAMlB,EAAOkB,EAAajB,GAAKC,GAC/B,IAAIF,EAAK4B,SAASI,aACdhC,EAAK4B,SAASK,eAGlB,QAAkBX,IAAdtB,EAAKuB,KAAoB,CAC3B,MAAMC,EAAWC,KAAKC,MAAMD,KAAKE,UAAU3B,IAC3CwB,EAASI,SAASK,gBAAiB,EACnC5B,EAAMyB,OAAOC,EAAAA,GAAAA,gBAA0B,CACrC9B,IAAKA,EACLC,IAAKA,EACLF,KAAMwB,IAIJxB,EAAKuB,MAAMY,OAASC,EAAAA,GAAAA,iBACtB/B,EAAMyB,OAAOC,EAAAA,GAAAA,mCAA6C1B,EAAMQ,MAAMM,OAAOmB,sBAAwB,GAI9FtC,EAAKuB,MAAMY,OAASC,EAAAA,GAAAA,WAC3B/B,EAAMyB,OAAOC,EAAAA,GAAAA,6BAAuC1B,EAAMQ,MAAMM,OAAOoB,iBAAmB,GAInFvC,EAAKuB,MAAMY,OAASC,EAAAA,GAAAA,WAC3B/B,EAAMyB,OAAOC,EAAAA,GAAAA,uCAAgD,E,KAG1D,CACL,MAAMP,EAAWC,KAAKC,MAAMD,KAAKE,UAAU3B,IAC3CwB,EAASI,SAASI,YAAa,EAC/B3B,EAAMyB,OAAOC,EAAAA,GAAAA,gBAA0B,CACrC9B,IAAKA,EACLC,IAAKA,EACLF,KAAMwB,G,EAQd,IAAK,IAAIvB,EAAM,EAAGA,EAAMe,EAAekB,OAAQjC,IAC7C,IAAK,IAAIC,EAAM,EAAGA,EAAMc,EAAef,GAAKiC,OAAQhC,IAClD,GAAIc,EAAef,GAAKC,GAAKqB,MAAMY,OAASC,EAAAA,GAAAA,WAAqB,CAC/D,MAAMZ,EAAWC,KAAKC,MAAMD,KAAKE,UAAUX,EAAef,GAAKC,KAC/DsB,EAASI,SAASC,eAAgB,EAClCxB,EAAMyB,OAAOC,EAAAA,GAAAA,kBAA4B,CACvC9B,IAAKA,EACLC,IAAKA,EACLF,KAAMwB,G,CAOdnB,EAAMyB,OAAOC,EAAAA,GAAAA,0CAAmD,GAChE1B,EAAMyB,OAAOC,EAAAA,GAAAA,0CAAmD,E,MAI7D,GAAI1B,EAAMQ,MAAMC,SAAS0B,8BAA+B,CAG3D,MAAoD,GAA7CnC,EAAMQ,MAAMC,SAAS2B,qBAA2B,CACrD,MAAMK,GAAOC,EAAAA,EAAAA,IAAoB7B,GAG3BlB,EAAOkB,EAAa4B,EAAK7C,KAAK6C,EAAK5C,KACzC,GAAIF,EAAK4B,SAASI,WAAY,SAC9B,GAAIhC,EAAK4B,SAASK,eAAgB,SAElC,MAAMT,EAAWC,KAAKC,MAAMD,KAAKE,UAAU3B,SAEzBsB,IAAdtB,EAAKuB,MACPC,EAASI,SAASK,gBAAiB,EACnC5B,EAAMyB,OAAOC,EAAAA,GAAAA,gBAA0B,CACrC9B,IAAK6C,EAAK7C,IACVC,IAAK4C,EAAK5C,IACVF,KAAMwB,IAIJxB,EAAKuB,MAAMY,OAASC,EAAAA,GAAAA,iBACtB/B,EAAMyB,OAAOC,EAAAA,GAAAA,mCAA6C1B,EAAMQ,MAAMM,OAAOmB,sBAAwB,GAI9FtC,EAAKuB,MAAMY,OAASC,EAAAA,GAAAA,WAC3B/B,EAAMyB,OAAOC,EAAAA,GAAAA,6BAAuC1B,EAAMQ,MAAMM,OAAOoB,iBAAmB,GAInFvC,EAAKuB,MAAMY,OAASC,EAAAA,GAAAA,WAC3B/B,EAAMyB,OAAOC,EAAAA,GAAAA,uCAAgD,KAO/DP,EAASI,SAASI,YAAa,EAC/B3B,EAAMyB,OAAOC,EAAAA,GAAAA,gBAA0B,CACrC9B,IAAK6C,EAAK7C,IACVC,IAAK4C,EAAK5C,IACVF,KAAMwB,KAKVnB,EAAMyB,OAAOC,EAAAA,GAAAA,oCAA8C1B,EAAMQ,MAAMC,SAAS2B,qBAAuB,GAGvG,IAAIO,GAAe,EACnB,IAAK,IAAI/C,EAAM,EAAGA,EAAMiB,EAAagB,OAAQjC,IAC3C,IAAK,IAAIC,EAAM,EAAGA,EAAMgB,EAAajB,GAAKiC,OAAQhC,IAChD,QAAoCoB,IAAhCJ,EAAajB,GAAKC,GAAKqB,OAAuBL,EAAajB,GAAKC,GAAK0B,SAASK,eAAgB,CAChGe,GAAe,EACf,K,CAMN,GAAIA,EAGF,OAFA3C,EAAMyB,OAAOC,EAAAA,GAAAA,yBAAkC,QAC/C1B,EAAMyB,OAAOC,EAAAA,GAAAA,+BAAwC,E,CAOzD,IAAK,IAAI9B,EAAM,EAAGA,EAAMe,EAAekB,OAAQjC,IAC7C,IAAK,IAAIC,EAAM,EAAGA,EAAMc,EAAef,GAAKiC,OAAQhC,IAClD,GAAIc,EAAef,GAAKC,GAAKqB,MAAMY,OAASC,EAAAA,GAAAA,iBAA2B,CACrE,MAAMZ,EAAWC,KAAKC,MAAMD,KAAKE,UAAUX,EAAef,GAAKC,KAC/DsB,EAASI,SAASC,eAAgB,EAClCxB,EAAMyB,OAAOC,EAAAA,GAAAA,kBAA4B,CACvC9B,IAAKA,EACLC,IAAKA,EACLF,KAAMwB,G,CAOdnB,EAAMyB,OAAOC,EAAAA,GAAAA,gDAAyD,GACtE1B,EAAMyB,OAAOC,EAAAA,GAAAA,gDAAyD,E,KAInE,CACH,MAAMe,GAAOC,EAAAA,EAAAA,IAAoB7B,GAC3BlB,EAAOkB,EAAa4B,EAAK7C,KAAK6C,EAAK5C,KAGnCsB,EAAWC,KAAKC,MAAMD,KAAKE,UAAU3B,SACrBsB,IAAlBE,EAASD,MACXC,EAASI,SAASK,gBAAiB,EAG/BjC,EAAKuB,MAAMY,OAASC,EAAAA,GAAAA,iBACtB/B,EAAMyB,OAAOC,EAAAA,GAAAA,mCAA6C1B,EAAMQ,MAAMM,OAAOmB,sBAAwB,GAI9FtC,EAAKuB,MAAMY,OAASC,EAAAA,GAAAA,WAC3B/B,EAAMyB,OAAOC,EAAAA,GAAAA,6BAAuC1B,EAAMQ,MAAMM,OAAOoB,iBAAmB,GAInFvC,EAAKuB,MAAMY,OAASC,EAAAA,GAAAA,WAC3B/B,EAAMyB,OAAOC,EAAAA,GAAAA,uCAAgD,IAK/DP,EAASI,SAASI,YAAa,EAIjC3B,EAAMyB,OAAOC,EAAAA,GAAAA,gBAA0B,CACrC9B,IAAK6C,EAAK7C,IACVC,IAAK4C,EAAK5C,IACVF,KAAMwB,G,CAKuC,IAA7CnB,EAAMQ,MAAMM,OAAOmB,sBACrBjC,EAAMyB,OAAOC,EAAAA,GAAAA,8CAAuD,GACnB,IAAxC1B,EAAMQ,MAAMM,OAAOoB,kBAC5BlC,EAAMyB,OAAOC,EAAAA,GAAAA,wCAAiD,GAIhE,IAAIiB,GAAe,EACnB,IAAK,IAAI/C,EAAM,EAAGA,EAAMiB,EAAagB,OAAQjC,IAC3C,IAAK,IAAIC,EAAM,EAAGA,EAAMgB,EAAajB,GAAKiC,OAAQhC,IAChD,QAAoCoB,IAAhCJ,EAAajB,GAAKC,GAAKqB,OAAuBL,EAAajB,GAAKC,GAAK0B,SAASK,eAAgB,CAChGe,GAAe,EACf,K,CAMN,GAAIA,EAGF,OAFA3C,EAAMyB,OAAOC,EAAAA,GAAAA,yBAAkC,QAC/C1B,EAAMyB,OAAOC,EAAAA,GAAAA,+BAAwC,GAKvD1B,EAAMyB,OAAOC,EAAAA,GAAAA,+BAAwC,GACrD1B,EAAMyB,OAAOC,EAAAA,GAAAA,6BAAsC,EAErD,CAEA,MAAO,CAACkB,EAAUC,MACRC,EAAAA,EAAAA,OAAcC,EAAAA,EAAAA,IAAoB,MAAO,CAC/CC,OAAOC,EAAAA,EAAAA,KAAgBC,EAAAA,EAAAA,IAAOhD,IAC9BiD,QAAS5C,GACR,EACD6C,EAAAA,EAAAA,IAAaC,EAAAA,EAAQ,CACnB1D,KAAMI,EAAQJ,KACd2D,gBAAgB,GACf,KAAM,EAAG,CAAC,UACZ,GAEL,I,QCnoBA,MAAMC,GAA2B,OAAgB,EAAQ,CAAC,CAAC,YAAY,qBAEvE,QCLA,MAAMC,EAAa,CAAC,YACdC,EAAa,CAAC,YACdC,EAAa,CAAC,YAQpB,OAA4BlE,EAAAA,EAAAA,IAAiB,CAC3CC,OAAQ,iBACRK,MAAMC,GAER,MAAMC,GAAQC,EAAAA,EAAAA,MAER0D,GAAmCxD,EAAAA,EAAAA,KAAS,IAE9CH,EAAMQ,MAAMC,SAASC,gBAClBV,EAAMQ,MAAMM,OAAO0B,yBACnBxC,EAAMQ,MAAMM,OAAOE,yBACnBhB,EAAMQ,MAAMM,OAAOqB,+BACnBnC,EAAMQ,MAAMM,OAAOkB,2BAIpB4B,GAAyCzD,EAAAA,EAAAA,KAAS,IAEpDH,EAAMQ,MAAMC,SAASC,gBAClBV,EAAMQ,MAAMM,OAAOwB,+BACnBtC,EAAMQ,MAAMM,OAAOE,yBACnBhB,EAAMQ,MAAMM,OAAOqB,+BACnBnC,EAAMQ,MAAMM,OAAOkB,2BAIpB6B,GAAoC1D,EAAAA,EAAAA,KAAS,IAE/CH,EAAMQ,MAAMC,SAASC,gBAClBV,EAAMQ,MAAMM,OAAOyB,0BACnBvC,EAAMQ,MAAMM,OAAOE,yBACnBhB,EAAMQ,MAAMM,OAAOqB,+BACnBnC,EAAMQ,MAAMM,OAAOkB,2BAIpB8B,GAA6B3D,EAAAA,EAAAA,KAAS,IACnCH,EAAMQ,MAAMM,OAAOE,wBACtB,0BACA,0BAGA+C,GAAmC5D,EAAAA,EAAAA,KAAS,IACzCH,EAAMQ,MAAMM,OAAOqB,8BACtB,iCACA,iCAGA6B,GAA8B7D,EAAAA,EAAAA,KAAS,IACpCH,EAAMQ,MAAMM,OAAOkB,yBACtB,2BACA,2BAGN,MAAO,CAACY,EAAUC,MACRC,EAAAA,EAAAA,OAAcC,EAAAA,EAAAA,IAAoBkB,EAAAA,GAAW,KAAM,EACzDC,EAAAA,EAAAA,GAAoB,SAAU,CAC5BC,UAAUjB,EAAAA,EAAAA,IAAOS,GACjBR,QAASN,EAAO,KAAOA,EAAO,GAAMuB,IAAiBlB,EAAAA,EAAAA,IAAOlD,GAAOyB,QAAOyB,EAAAA,EAAAA,IAAOxB,EAAAA,IAAU2C,uCAAuC,MACjIC,EAAAA,EAAAA,KAAiBpB,EAAAA,EAAAA,IAAOY,IAA8B,EAAGN,IAC5DU,EAAAA,EAAAA,GAAoB,SAAU,CAC5BC,UAAUjB,EAAAA,EAAAA,IAAOU,GACjBT,QAASN,EAAO,KAAOA,EAAO,GAAMuB,IAAiBlB,EAAAA,EAAAA,IAAOlD,GAAOyB,QAAOyB,EAAAA,EAAAA,IAAOxB,EAAAA,IAAU6C,8CAA8C,MACxID,EAAAA,EAAAA,KAAiBpB,EAAAA,EAAAA,IAAOa,IAAoC,EAAGN,IAClES,EAAAA,EAAAA,GAAoB,SAAU,CAC5BC,UAAUjB,EAAAA,EAAAA,IAAOW,GACjBV,QAASN,EAAO,KAAOA,EAAO,GAAMuB,IAAiBlB,EAAAA,EAAAA,IAAOlD,GAAOyB,QAAOyB,EAAAA,EAAAA,IAAOxB,EAAAA,IAAU8C,wCAAwC,MAClIF,EAAAA,EAAAA,KAAiBpB,EAAAA,EAAAA,IAAOc,IAA+B,EAAGN,IAC5D,IAEL,IChFA,MAAM,EAAc,EAEpB,Q,oBCFA,MACMF,EAAa,CAAER,MAAO,gBACtBS,EAAa,CAAET,MAAO,wBACtBU,EAAa,CAAEe,IAAK,GACpBC,EAAa,CAAED,IAAK,GAQ1B,OAA4BjF,EAAAA,EAAAA,IAAiB,CAC3CC,OAAQ,mBACRK,MAAMC,GAER,MAAMC,GAAQC,EAAAA,EAAAA,MACR0E,GAASC,EAAAA,EAAAA,MAKf,SAASC,IACP7E,EAAMyB,OAAOC,EAAAA,GAAAA,yBAAkC,GAC/C1B,EAAMyB,OAAOC,EAAAA,GAAAA,uBAA4BT,GAEzCjB,EAAMyB,OAAOC,EAAAA,GAAAA,wBAAkC,GAC/C1B,EAAMyB,OAAOC,EAAAA,GAAAA,0BAAoC,GACjD1B,EAAMyB,OAAOC,EAAAA,GAAAA,wBAAkC,GAC/C1B,EAAMyB,OAAOC,EAAAA,GAAAA,yBAAmC,GAChD1B,EAAMyB,OAAOC,EAAAA,GAAAA,+BAAyC,GAEtD1B,EAAMyB,OAAOC,EAAAA,GAAAA,uCAAgD,GAC7D1B,EAAMyB,OAAOC,EAAAA,GAAAA,8CAAuD,GACpE1B,EAAMyB,OAAOC,EAAAA,GAAAA,wCAAiD,GAE9D1B,EAAMyB,OAAOC,EAAAA,GAAAA,uCAAgD,GAC7D1B,EAAMyB,OAAOC,EAAAA,GAAAA,8CAAuD,GACpE1B,EAAMyB,OAAOC,EAAAA,GAAAA,wCAAiD,GAE9D1B,EAAMyB,OAAOC,EAAAA,GAAAA,mCAA6C,IAC1D1B,EAAMyB,OAAOC,EAAAA,GAAAA,6BAAuC,GAEpD1B,EAAMyB,OAAOC,EAAAA,GAAAA,kCAA4C,GAEzD1B,EAAMyB,OAAOC,EAAAA,GAAAA,6BAAsC,GACnD1B,EAAMyB,OAAOC,EAAAA,GAAAA,6BAAsC,GAEnD1B,EAAMyB,OAAOC,EAAAA,GAAAA,iBAA2B,CAAC,KAEzC1B,EAAMyB,OAAOC,EAAAA,GAAAA,yCAAkD,GAC/D1B,EAAMyB,OAAOC,EAAAA,GAAAA,gDAAyD,GACtE1B,EAAMyB,OAAOC,EAAAA,GAAAA,0CAAmD,GAEhE1B,EAAMyB,OAAOC,EAAAA,GAAAA,yCAAkD,GAC/D1B,EAAMyB,OAAOC,EAAAA,GAAAA,gDAAyD,GACtE1B,EAAMyB,OAAOC,EAAAA,GAAAA,0CAAmD,GAEhE1B,EAAMyB,OAAOC,EAAAA,GAAAA,qCAA+C,IAC5D1B,EAAMyB,OAAOC,EAAAA,GAAAA,+BAAyC,GAEtD1B,EAAMyB,OAAOC,EAAAA,GAAAA,oCAA8C,GAE3D1B,EAAMyB,OAAOC,EAAAA,GAAAA,+BAAwC,GACrD1B,EAAMyB,OAAOC,EAAAA,GAAAA,+BAAwC,GAErD1B,EAAMyB,OAAOC,EAAAA,GAAAA,mBAA6B,CAAC,KAE3CiD,EAAOG,KAAK,CAAEhD,KAAM,SACtB,CAEA,MAAO,CAACc,EAAUC,MACRC,EAAAA,EAAAA,OAAcC,EAAAA,EAAAA,IAAoB,MAAOS,EAAY,EAC3DU,EAAAA,EAAAA,GAAoB,MAAOT,EAAY,EACpCP,EAAAA,EAAAA,IAAOlD,GAAOQ,MAAMM,OAAOiE,gBACvBjC,EAAAA,EAAAA,OAAcC,EAAAA,EAAAA,IAAoB,KAAMW,EAAY,gBACpDR,EAAAA,EAAAA,IAAOlD,GAAOQ,MAAMC,SAASsE,gBAC3BjC,EAAAA,EAAAA,OAAcC,EAAAA,EAAAA,IAAoB,KAAM2B,EAAY,iBACrDM,EAAAA,EAAAA,IAAoB,IAAI,IAC9Bd,EAAAA,EAAAA,GAAoB,SAAU,CAAEf,QAAS0B,GAAW,kBAI1D,IChFA,MAAM,GAA2B,OAAgB,EAAQ,CAAC,CAAC,YAAY,qBAEvE,QCLA,MAAMI,EAAeC,KAAMC,EAAAA,EAAAA,IAAa,mBAAmBD,EAAEA,KAAIE,EAAAA,EAAAA,MAAcF,GACzE1B,EAAa,CAAER,MAAO,aACtBS,EAA2BwB,GAAa,KAAmBf,EAAAA,EAAAA,GAAoB,KAAM,KAAM,qBAAsB,KACjHR,EAAa,CAAEV,MAAO,UACtB0B,EAAa,CAAE1B,MAAO,iBACtBqC,EAA2BJ,GAAa,KAAmBf,EAAAA,EAAAA,GAAoB,KAAM,KAAM,iBAAkB,KAC7GoB,EAAa,CAAEtC,MAAO,SACtBuC,EAAa,CAAEvC,MAAO,iBACtBwC,EAA2BP,GAAa,KAAmBf,EAAAA,EAAAA,GAAoB,KAAM,KAAM,kBAAmB,KAC9GuB,EAAa,CAAEzC,MAAO,SACtB0C,EAAc,CAAE1C,MAAO,OACvB2C,EAA4BV,GAAa,KAAmBf,EAAAA,EAAAA,GAAoB,KAAM,KAAM,SAAU,KACtG0B,EAAc,CAAEnB,IAAK,GACrBoB,EAAc,CAAEpB,IAAK,GAU3B,OAA4BjF,EAAAA,EAAAA,IAAiB,CAC3CC,OAAQ,OACRK,MAAMC,GAER,MAAMC,GAAQC,EAAAA,EAAAA,MAEd,MAAO,CAAC2C,EAAUC,MACRC,EAAAA,EAAAA,OAAcC,EAAAA,EAAAA,IAAoBkB,EAAAA,GAAW,KAAM,EACxDf,EAAAA,EAAAA,IAAOlD,GAAOQ,MAAMM,OAAOiE,gBAAiB7B,EAAAA,EAAAA,IAAOlD,GAAOQ,MAAMC,SAASsE,gBACrEjC,EAAAA,EAAAA,OAAcgD,EAAAA,EAAAA,IAAaC,EAAkB,CAAEtB,IAAK,MACrDO,EAAAA,EAAAA,IAAoB,IAAI,IAC5Bd,EAAAA,EAAAA,GAAoB,MAAOV,EAAY,CACrCC,GACAS,EAAAA,EAAAA,GAAoB,MAAOR,EAAY,EACrCQ,EAAAA,EAAAA,GAAoB,MAAOQ,EAAY,CACrCW,GACAnB,EAAAA,EAAAA,GAAoB,MAAOoB,EAAY,GACpCxC,EAAAA,EAAAA,KAAW,IAAOC,EAAAA,EAAAA,IAAoBkB,EAAAA,GAAW,MAAM+B,EAAAA,EAAAA,KAAY9C,EAAAA,EAAAA,IAAOlD,GAAOQ,MAAMC,SAASG,OAAO,CAAChB,EAAKqG,MACpGnD,EAAAA,EAAAA,OAAcC,EAAAA,EAAAA,IAAoB,MAAO,CAC/C0B,IAAKwB,EACLjD,MAAO,aACN,GACAF,EAAAA,EAAAA,KAAW,IAAOC,EAAAA,EAAAA,IAAoBkB,EAAAA,GAAW,MAAM+B,EAAAA,EAAAA,IAAYpG,GAAK,CAACC,EAAKqG,MACrEpD,EAAAA,EAAAA,OAAcC,EAAAA,EAAAA,IAAoB,MAAO,CAC/C0B,IAAKyB,EACLlD,MAAO,cACN,EACDI,EAAAA,EAAAA,IAAa+C,EAAa,CACxBxG,KAAME,EACND,IAAKqG,EACLpG,IAAKqG,GACJ,KAAM,EAAG,CAAC,OAAQ,MAAO,aAE5B,WAEJ,WAGRhC,EAAAA,EAAAA,GAAoB,MAAOqB,EAAY,CACrCC,GACAtB,EAAAA,EAAAA,GAAoB,MAAOuB,EAAY,GACpC3C,EAAAA,EAAAA,KAAW,IAAOC,EAAAA,EAAAA,IAAoBkB,EAAAA,GAAW,MAAM+B,EAAAA,EAAAA,KAAY9C,EAAAA,EAAAA,IAAOlD,GAAOQ,MAAMM,OAAOF,OAAO,CAAChB,EAAKqG,MAClGnD,EAAAA,EAAAA,OAAcC,EAAAA,EAAAA,IAAoB,MAAO,CAC/C0B,IAAKwB,EACLjD,MAAO,aACN,GACAF,EAAAA,EAAAA,KAAW,IAAOC,EAAAA,EAAAA,IAAoBkB,EAAAA,GAAW,MAAM+B,EAAAA,EAAAA,IAAYpG,GAAK,CAACC,EAAKqG,MACrEpD,EAAAA,EAAAA,OAAcC,EAAAA,EAAAA,IAAoB,MAAO,CAC/C0B,IAAKyB,EACLlD,MAAO,cACN,EACDI,EAAAA,EAAAA,IAAagD,EAAAA,EAAc,CACzBzG,KAAME,EACND,IAAKqG,EACLpG,IAAKqG,GACJ,KAAM,EAAG,CAAC,OAAQ,MAAO,aAE5B,WAEJ,aAIVhC,EAAAA,EAAAA,GAAoB,MAAOwB,EAAa,CACtCC,GACCzC,EAAAA,EAAAA,IAAOlD,GAAOQ,MAAMM,OAAOJ,iBACvBoC,EAAAA,EAAAA,OAAcC,EAAAA,EAAAA,IAAoB,KAAM6C,EAAa,kBACrD9C,EAAAA,EAAAA,OAAcC,EAAAA,EAAAA,IAAoB,KAAM8C,EAAa,oBAC1DzC,EAAAA,EAAAA,IAAaiD,QAGhB,IAEL,IC7FA,MAAM,GAA2B,OAAgB,EAAQ,CAAC,CAAC,YAAY,qBAEvE,O","sources":["webpack://battleship/./src/components/EnemySquare.vue?2734","webpack://battleship/./src/components/EnemySquare.vue","webpack://battleship/./src/components/AbilityButtons.vue?79b3","webpack://battleship/./src/components/AbilityButtons.vue","webpack://battleship/./src/components/MatchResultModal.vue?d324","webpack://battleship/./src/components/MatchResultModal.vue","webpack://battleship/./src/views/Game.vue?7ed8","webpack://battleship/./src/views/Game.vue"],"sourcesContent":["import { defineComponent as _defineComponent } from 'vue'\nimport { unref as _unref, createVNode as _createVNode, normalizeClass as _normalizeClass, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\"\n\nimport { ShipName, Mutation } from '@/store/enums';\r\nimport { Tile } from '@/store/interfaces';\r\nimport { useStore } from '@/store';\r\nimport Sprite from '@/components/Sprite.vue';\r\nimport { computed } from 'vue';\r\nimport { isInvalidSquare, makeRandomValidMove } from '@/utils/shipUtils';\r\n\r\n\r\ninterface SquareProps {\r\n  tile: Tile;\r\n  row: number;\r\n  col: number;\r\n}\r\n\r\n\nexport default /*#__PURE__*/_defineComponent({\n  __name: 'EnemySquare',\n  props: {\n    tile: null,\n    row: null,\n    col: null\n  },\n  setup(__props: any) {\n\nconst props = __props as {\r\n  tile: Tile;\r\n  row: number;\r\n  col: number;\r\n};\n\r\n\r\nconst store = useStore();\r\n\r\nconst background = computed(() => {\r\n  if (props.tile.background.isWater) return 'water';\r\n  if (props.tile.background.isLand) return 'land';\r\n  if (props.tile.background.isOutOfBounds) return 'out-of-bounds';\r\n});\r\n\r\nfunction Attack() {\r\n  if (store.state.computer.hasCurrentTurn) return;\r\n  const computer_board = store.state.computer.board\r\n  const player_board = store.state.player.board\r\n  if (isInvalidSquare(props.row, props.col, computer_board)) return;\r\n\r\n  // Player submarine ability\r\n  if (store.state.player.isUsingSubmarineAbility) {\r\n\r\n    // Iterate over a 3x3 area around the square\r\n    for (let row = props.row - 1; row <= props.row + 1; row++) {\r\n      for (let col = props.col - 1; col <= props.col + 1; col++) {\r\n\r\n        // Make sure the square is valid\r\n        if (isInvalidSquare(row, col, computer_board)) continue;\r\n\r\n        // If the square contains a ship, uncover it\r\n        const tile = computer_board[row][col];\r\n        if (tile.ship !== undefined) {\r\n          const new_tile = JSON.parse(JSON.stringify(tile));\r\n          new_tile.contains.uncoveredShip = true;\r\n          store.commit(Mutation.SET_COMPUTER_TILE, {\r\n            row: row,\r\n            col: col,\r\n            tile: new_tile\r\n          });\r\n        }\r\n\r\n        // Otherwise, mark it as a missed shot\r\n        else {\r\n          \r\n          // Except if it already contains a missed shot, successful shot, or uncovered ship\r\n          if (tile.contains.missedShot) continue;\r\n          if (tile.contains.successfulShot) continue;\r\n          if (tile.contains.uncoveredShip) continue;\r\n\r\n          const new_tile = JSON.parse(JSON.stringify(tile));\r\n          new_tile.contains.missedShot = true;\r\n          store.commit(Mutation.SET_COMPUTER_TILE, {\r\n            row: row,\r\n            col: col,\r\n            tile: new_tile\r\n          });\r\n        }\r\n\r\n      }\r\n    }\r\n\r\n    // Uncover the submarine\r\n    for (let row = 0; row < player_board.length; row++) {\r\n      for (let col = 0; col < player_board[row].length; col++) {\r\n        if (player_board[row][col].ship?.name === ShipName.SUBMARINE) {\r\n          const new_tile = JSON.parse(JSON.stringify(player_board[row][col]));\r\n          new_tile.contains.uncoveredShip = true;\r\n          store.commit(Mutation.SET_PLAYER_TILE, {\r\n            row: row,\r\n            col: col,\r\n            tile: new_tile\r\n          });\r\n        }\r\n      }\r\n    }\r\n\r\n    // Reflect the state of the abilities used\r\n    store.commit(Mutation.SET_PLAYER_HAS_USED_SUBMARINE_ABILITY, true);\r\n    store.commit(Mutation.SET_PLAYER_IS_USING_SUBMARINE_ABILITY, false);\r\n  \r\n  }\r\n\r\n  // Player battleship ability\r\n  else if (store.state.player.isUsingBattleshipAbility) {\r\n\r\n    // Iterate over a 3x3 square around the battleship\r\n    for (let row = props.row - 1; row <= props.row + 1; row++) {\r\n      for (let col = props.col - 1; col <= props.col + 1; col++) {\r\n\r\n        // Make sure the square is valid\r\n        if (isInvalidSquare(row, col, computer_board)) continue;\r\n\r\n        // If the square contains a ship, hit it\r\n        const tile = computer_board[row][col];\r\n        if (tile.ship !== undefined) {\r\n          const new_tile = JSON.parse(JSON.stringify(tile));\r\n          new_tile.contains.successfulShot = true;\r\n          store.commit(Mutation.SET_COMPUTER_TILE, {\r\n            row: row,\r\n            col: col,\r\n            tile: new_tile\r\n          });\r\n\r\n          // If the ship is an aircraft carrier, subtract 1 from its health\r\n          if (tile.ship?.name === ShipName.AIRCRAFT_CARRIER) {\r\n            store.commit(Mutation.SET_COMPUTER_AIRCRAFT_CARRIER_HEALTH, store.state.computer.aircraftCarrierHealth - 1);\r\n          }\r\n\r\n          // If the ship is a battleship, subtract 1 from its health\r\n          else if (tile.ship?.name === ShipName.BATTLESHIP) {\r\n            store.commit(Mutation.SET_COMPUTER_BATTLESHIP_HEALTH, store.state.computer.battleshipHealth - 1);\r\n          }\r\n\r\n          // If the ship is a submarine, sink it, as it only has 1 health\r\n          else if (tile.ship?.name === ShipName.SUBMARINE) {\r\n            store.commit(Mutation.SET_COMPUTER_HAS_USED_SUBMARINE_ABILITY, true);\r\n          }\r\n\r\n        }\r\n\r\n        // Otherwise, mark it as a missed shot\r\n        else {\r\n          const new_tile = JSON.parse(JSON.stringify(tile));\r\n          new_tile.contains.missedShot = true;\r\n          store.commit(Mutation.SET_COMPUTER_TILE, {\r\n            row: row,\r\n            col: col,\r\n            tile: new_tile\r\n          });\r\n        }\r\n\r\n      }\r\n    }\r\n\r\n    // Uncover the battleship\r\n    for (let row = 0; row < player_board.length; row++) {\r\n      for (let col = 0; col < player_board[row].length; col++) {\r\n        if (player_board[row][col].ship?.name === ShipName.BATTLESHIP) {\r\n          const new_tile = JSON.parse(JSON.stringify(player_board[row][col]));\r\n          new_tile.contains.uncoveredShip = true;\r\n          store.commit(Mutation.SET_PLAYER_TILE, {\r\n            row: row,\r\n            col: col,\r\n            tile: new_tile\r\n          });\r\n        }\r\n      }\r\n    }\r\n\r\n    // Reflect the state of the abilities used\r\n    store.commit(Mutation.SET_PLAYER_HAS_USED_BATTLESHIP_ABILITY, true);\r\n    store.commit(Mutation.SET_PLAYER_IS_USING_BATTLESHIP_ABILITY, false);\r\n  }\r\n\r\n  // Player aircraft carrier ability\r\n  else if (store.state.player.isUsingAircraftCarrierAbility) {\r\n    const tile = computer_board[props.row][props.col];\r\n\r\n    // Hit the square\r\n    const new_tile = JSON.parse(JSON.stringify(tile));\r\n    if (new_tile.ship !== undefined) {\r\n      new_tile.contains.successfulShot = true;\r\n\r\n      // If the ship is an aircraft carrier, subtract 1 from its health\r\n      if (tile.ship?.name === ShipName.AIRCRAFT_CARRIER) {\r\n        store.commit(Mutation.SET_COMPUTER_AIRCRAFT_CARRIER_HEALTH, store.state.computer.aircraftCarrierHealth - 1);\r\n      }\r\n\r\n      // If the ship is a battleship, subtract 1 from its health\r\n      else if (tile.ship?.name === ShipName.BATTLESHIP) {\r\n        store.commit(Mutation.SET_COMPUTER_BATTLESHIP_HEALTH, store.state.computer.battleshipHealth - 1);\r\n      }\r\n\r\n      // If the ship is a submarine, sink it, as it only has 1 health\r\n      else if (tile.ship?.name === ShipName.SUBMARINE) {\r\n        store.commit(Mutation.SET_COMPUTER_HAS_USED_SUBMARINE_ABILITY, true);\r\n      }\r\n\r\n    }\r\n    else {\r\n      new_tile.contains.missedShot = true;\r\n    }\r\n\r\n    // Reflect the state of the square\r\n    store.commit(Mutation.SET_COMPUTER_TILE, {\r\n      row: props.row,\r\n      col: props.col,\r\n      tile: new_tile\r\n    });\r\n\r\n    // Substract 1 from the aircraft carrier's shots\r\n    store.commit(Mutation.SET_PLAYER_AIRCRAFT_CARRIER_SHOTS, store.state.player.aircraftCarrierShots - 1);\r\n\r\n    // Check if the player won\r\n    let player_won = true;\r\n    for (let row = 0; row < computer_board.length; row++) {\r\n      for (let col = 0; col < computer_board[row].length; col++) {\r\n        if (computer_board[row][col].ship !== undefined && !computer_board[row][col].contains.successfulShot) {\r\n          player_won = false;\r\n          break\r\n        }\r\n      }\r\n    }\r\n\r\n    // If so, change the state of the game\r\n    if (player_won) {\r\n      store.commit(Mutation.SET_GAME_IS_IN_PROGRESS, false);\r\n      store.commit(Mutation.SET_PLAYER_HAS_WON_THE_GAME, true);\r\n      return;\r\n    }\r\n\r\n    // If it isn't the last shot, return\r\n    if (store.state.player.aircraftCarrierShots > 0) return;\r\n\r\n    // Uncover the aircraft carrier\r\n    for (let row = 0; row < player_board.length; row++) {\r\n      for (let col = 0; col < player_board[row].length; col++) {\r\n        if (player_board[row][col].ship?.name === ShipName.AIRCRAFT_CARRIER) {\r\n          const new_tile = JSON.parse(JSON.stringify(player_board[row][col]));\r\n          new_tile.contains.uncoveredShip = true;\r\n          store.commit(Mutation.SET_PLAYER_TILE, {\r\n            row: row,\r\n            col: col,\r\n            tile: new_tile\r\n          });\r\n        }\r\n      }\r\n    }\r\n\r\n    // If it is the last shot, change the state of the abilities\r\n    store.commit(Mutation.SET_PLAYER_HAS_USED_AIRCRAFT_CARRIER_ABILITY, true);\r\n    store.commit(Mutation.SET_PLAYER_IS_USING_AIRCRAFT_CARRIER_ABILITY, false);\r\n  }\r\n\r\n  // Player normal move\r\n  else {\r\n    const tile = computer_board[props.row][props.col];\r\n\r\n    // Hit the square\r\n    const new_tile = JSON.parse(JSON.stringify(tile));\r\n    if (new_tile.ship !== undefined) {\r\n      new_tile.contains.successfulShot = true;\r\n\r\n      // If the ship is an aircraft carrier, subtract 1 from its health\r\n      if (tile.ship?.name === ShipName.AIRCRAFT_CARRIER) {\r\n        store.commit(Mutation.SET_COMPUTER_AIRCRAFT_CARRIER_HEALTH, store.state.computer.aircraftCarrierHealth - 1);\r\n      }\r\n\r\n      // If the ship is a battleship, subtract 1 from its health\r\n      else if (tile.ship?.name === ShipName.BATTLESHIP) {\r\n        store.commit(Mutation.SET_COMPUTER_BATTLESHIP_HEALTH, store.state.computer.battleshipHealth - 1);\r\n      }\r\n\r\n      // If the ship is a submarine, sink it, as it only has 1 health\r\n      else if (tile.ship?.name === ShipName.SUBMARINE) {\r\n        store.commit(Mutation.SET_COMPUTER_HAS_USED_SUBMARINE_ABILITY, true);\r\n      }\r\n\r\n    }\r\n    else {\r\n      new_tile.contains.missedShot = true;\r\n    }\r\n\r\n    // Reflect the state of the square\r\n    store.commit(Mutation.SET_COMPUTER_TILE, {\r\n      row: props.row,\r\n      col: props.col,\r\n      tile: new_tile\r\n    });\r\n\r\n  }\r\n\r\n  // Check if either the battleship or the aircraft carrier were sunk\r\n  if (store.state.computer.aircraftCarrierHealth === 0) {\r\n    store.commit(Mutation.SET_COMPUTER_HAS_USED_AIRCRAFT_CARRIER_ABILITY, true);\r\n  } else if (store.state.computer.battleshipHealth === 0) {\r\n    store.commit(Mutation.SET_COMPUTER_HAS_USED_BATTLESHIP_ABILITY, true);\r\n  }\r\n\r\n  // Check if the player won\r\n  let player_won = true;\r\n  for (let row = 0; row < computer_board.length; row++) {\r\n    for (let col = 0; col < computer_board[row].length; col++) {\r\n      if (computer_board[row][col].ship !== undefined && !computer_board[row][col].contains.successfulShot) {\r\n        player_won = false;\r\n        break\r\n      }\r\n    }\r\n  }\r\n\r\n  // If so, change the state of the game\r\n  if (player_won) {\r\n    store.commit(Mutation.SET_GAME_IS_IN_PROGRESS, false);\r\n    store.commit(Mutation.SET_PLAYER_HAS_WON_THE_GAME, true);\r\n    return;\r\n  }\r\n\r\n  // Since the players move is over, change the turn\r\n  store.commit(Mutation.SET_PLAYER_HAS_CURRENT_TURN, false);\r\n  store.commit(Mutation.SET_COMPUTER_HAS_CURRENT_TURN, true);\r\n\r\n  // For now, always try to use the abilities if it hasn't already\r\n  if (!store.state.computer.hasUsedAircraftCarrierAbility) {\r\n    store.commit(Mutation.SET_COMPUTER_IS_USING_AIRCRAFT_CARRIER_ABILITY, true);\r\n  } else if (!store.state.computer.hasUsedBattleshipAbility) {\r\n    store.commit(Mutation.SET_COMPUTER_IS_USING_BATTLESHIP_ABILITY, true);\r\n  } else if (!store.state.computer.hasUsedSubmarineAbility) {\r\n    store.commit(Mutation.SET_COMPUTER_IS_USING_SUBMARINE_ABILITY, true);\r\n  }\r\n\r\n  // Computer submarine ability\r\n  if (store.state.computer.isUsingSubmarineAbility) {\r\n    const move = makeRandomValidMove(player_board);\r\n\r\n    // Iterate over a 3x3 area around the square\r\n    for (let row = move.row - 1; row <= move.row + 1; row++) {\r\n      for (let col = move.col - 1; col <= move.col + 1; col++) {\r\n\r\n        // Make sure the square is valid\r\n        if (isInvalidSquare(row, col, player_board)) continue;\r\n\r\n        // If the square contains a ship, uncover it\r\n        const tile = player_board[row][col];\r\n        if (tile.ship !== undefined) {\r\n          const new_tile = JSON.parse(JSON.stringify(tile));\r\n          new_tile.contains.uncoveredShip = true;\r\n          store.commit(Mutation.SET_PLAYER_TILE, {\r\n            row: row,\r\n            col: col,\r\n            tile: new_tile\r\n          });\r\n        }\r\n\r\n        // Otherwise, mark it as a missed shot\r\n        else {\r\n          \r\n          // Except if it already contains a missed shot, successful shot, or uncovered ship\r\n          if (tile.contains.missedShot) continue;\r\n          if (tile.contains.successfulShot) continue;\r\n          if (tile.contains.uncoveredShip) continue;\r\n\r\n          const new_tile = JSON.parse(JSON.stringify(tile));\r\n          new_tile.contains.missedShot = true;\r\n          store.commit(Mutation.SET_PLAYER_TILE, {\r\n            row: row,\r\n            col: col,\r\n            tile: new_tile\r\n          });\r\n        }\r\n\r\n      }\r\n    }\r\n\r\n    // Uncover the submarine\r\n    for (let row = 0; row < computer_board.length; row++) {\r\n      for (let col = 0; col < computer_board[row].length; col++) {\r\n        if (computer_board[row][col].ship?.name === ShipName.SUBMARINE) {\r\n          const new_tile = JSON.parse(JSON.stringify(computer_board[row][col]));\r\n          new_tile.contains.uncoveredShip = true;\r\n          store.commit(Mutation.SET_COMPUTER_TILE, {\r\n            row: row,\r\n            col: col,\r\n            tile: new_tile\r\n          });\r\n        }\r\n      }\r\n    }\r\n\r\n    // Reflect the state of the abilities used\r\n    store.commit(Mutation.SET_COMPUTER_HAS_USED_SUBMARINE_ABILITY, true);\r\n    store.commit(Mutation.SET_COMPUTER_IS_USING_SUBMARINE_ABILITY, false);\r\n  \r\n  }\r\n\r\n  // Computer battleship ability\r\n  else if (store.state.computer.isUsingBattleshipAbility) {\r\n    const move = makeRandomValidMove(player_board);\r\n\r\n    // Iterate over a 3x3 area around the square\r\n    for (let row = move.row - 1; row <= move.row + 1; row++) {\r\n      for (let col = move.col - 1; col <= move.col + 1; col++) {\r\n\r\n        // Make sure the square is valid\r\n        if (isInvalidSquare(row, col, player_board)) continue;\r\n\r\n        // If it already contains a missed shot, or a successful shot, skip it\r\n        const tile = player_board[row][col];\r\n        if (tile.contains.missedShot) continue;\r\n        if (tile.contains.successfulShot) continue;\r\n\r\n        // If the square contains a ship, hit it\r\n        if (tile.ship !== undefined) {\r\n          const new_tile = JSON.parse(JSON.stringify(tile));\r\n          new_tile.contains.successfulShot = true;\r\n          store.commit(Mutation.SET_PLAYER_TILE, {\r\n            row: row,\r\n            col: col,\r\n            tile: new_tile\r\n          });\r\n\r\n          // If the ship is an aircraft carrier, subtract 1 from its health\r\n          if (tile.ship?.name === ShipName.AIRCRAFT_CARRIER) {\r\n            store.commit(Mutation.SET_PLAYER_AIRCRAFT_CARRIER_HEALTH, store.state.player.aircraftCarrierHealth - 1);\r\n          }\r\n\r\n          // If the ship is a battleship, subtract 1 from its health\r\n          else if (tile.ship?.name === ShipName.BATTLESHIP) {\r\n            store.commit(Mutation.SET_PLAYER_BATTLESHIP_HEALTH, store.state.player.battleshipHealth - 1);\r\n          }\r\n\r\n          // If the ship is a submarine, sink it, as it only has 1 health\r\n          else if (tile.ship?.name === ShipName.SUBMARINE) {\r\n            store.commit(Mutation.SET_PLAYER_HAS_USED_SUBMARINE_ABILITY, true);\r\n          }\r\n\r\n        } else {\r\n          const new_tile = JSON.parse(JSON.stringify(tile));\r\n          new_tile.contains.missedShot = true;\r\n          store.commit(Mutation.SET_PLAYER_TILE, {\r\n            row: row,\r\n            col: col,\r\n            tile: new_tile\r\n          });\r\n        }\r\n\r\n      }\r\n    }\r\n\r\n    // Uncover the battleship\r\n    for (let row = 0; row < computer_board.length; row++) {\r\n      for (let col = 0; col < computer_board[row].length; col++) {\r\n        if (computer_board[row][col].ship?.name === ShipName.BATTLESHIP) {\r\n          const new_tile = JSON.parse(JSON.stringify(computer_board[row][col]));\r\n          new_tile.contains.uncoveredShip = true;\r\n          store.commit(Mutation.SET_COMPUTER_TILE, {\r\n            row: row,\r\n            col: col,\r\n            tile: new_tile\r\n          });\r\n        }\r\n      }\r\n    }\r\n\r\n    // Reflect the state of the abilities used\r\n    store.commit(Mutation.SET_COMPUTER_HAS_USED_BATTLESHIP_ABILITY, true);\r\n    store.commit(Mutation.SET_COMPUTER_IS_USING_BATTLESHIP_ABILITY, false);\r\n  }\r\n\r\n  // Computer aircraft carrier ability\r\n  else if (store.state.computer.isUsingAircraftCarrierAbility) {\r\n    \r\n    // For each of the computer aircraft carrier's shots\r\n    while (store.state.computer.aircraftCarrierShots != 0) {\r\n      const move = makeRandomValidMove(player_board);\r\n\r\n      // If the square already contains a missed shot, or a successful shot, skip it\r\n      const tile = player_board[move.row][move.col];\r\n      if (tile.contains.missedShot) continue;\r\n      if (tile.contains.successfulShot) continue;\r\n\r\n      const new_tile = JSON.parse(JSON.stringify(tile));\r\n      // If the square contains a ship, hit it\r\n      if (tile.ship !== undefined) {\r\n        new_tile.contains.successfulShot = true;\r\n        store.commit(Mutation.SET_PLAYER_TILE, {\r\n          row: move.row,\r\n          col: move.col,\r\n          tile: new_tile\r\n        });\r\n\r\n        // If the ship is an aircraft carrier, subtract 1 from its health\r\n        if (tile.ship?.name === ShipName.AIRCRAFT_CARRIER) {\r\n          store.commit(Mutation.SET_PLAYER_AIRCRAFT_CARRIER_HEALTH, store.state.player.aircraftCarrierHealth - 1);\r\n        }\r\n\r\n        // If the ship is a battleship, subtract 1 from its health\r\n        else if (tile.ship?.name === ShipName.BATTLESHIP) {\r\n          store.commit(Mutation.SET_PLAYER_BATTLESHIP_HEALTH, store.state.player.battleshipHealth - 1);\r\n        }\r\n\r\n        // If the ship is a submarine, sink it, as it only has 1 health\r\n        else if (tile.ship?.name === ShipName.SUBMARINE) {\r\n          store.commit(Mutation.SET_PLAYER_HAS_USED_SUBMARINE_ABILITY, true);\r\n        }\r\n\r\n      }\r\n\r\n      // Otherwise, mark it as a missed shot\r\n      else {\r\n        new_tile.contains.missedShot = true;\r\n        store.commit(Mutation.SET_PLAYER_TILE, {\r\n          row: move.row,\r\n          col: move.col,\r\n          tile: new_tile\r\n        });\r\n      }\r\n\r\n      // Decrement the number of shots\r\n      store.commit(Mutation.SET_COMPUTER_AIRCRAFT_CARRIER_SHOTS, store.state.computer.aircraftCarrierShots - 1);\r\n\r\n      // Check if the computer won\r\n      let computer_won = true;\r\n      for (let row = 0; row < player_board.length; row++) {\r\n        for (let col = 0; col < player_board[row].length; col++) {\r\n          if (player_board[row][col].ship !== undefined && !player_board[row][col].contains.successfulShot) {\r\n            computer_won = false;\r\n            break\r\n          }\r\n        }\r\n      }\r\n\r\n      // If so, change the state of the game\r\n      if (computer_won) {\r\n        store.commit(Mutation.SET_GAME_IS_IN_PROGRESS, false);\r\n        store.commit(Mutation.SET_COMPUTER_HAS_WON_THE_GAME, true);\r\n        return;\r\n      }\r\n\r\n    }\r\n\r\n    // Uncover the aircraft carrier\r\n    for (let row = 0; row < computer_board.length; row++) {\r\n      for (let col = 0; col < computer_board[row].length; col++) {\r\n        if (computer_board[row][col].ship?.name === ShipName.AIRCRAFT_CARRIER) {\r\n          const new_tile = JSON.parse(JSON.stringify(computer_board[row][col]));\r\n          new_tile.contains.uncoveredShip = true;\r\n          store.commit(Mutation.SET_COMPUTER_TILE, {\r\n            row: row,\r\n            col: col,\r\n            tile: new_tile\r\n          });\r\n        }\r\n      }\r\n    }\r\n\r\n    // If it is the last shot, change the state of the abilities\r\n    store.commit(Mutation.SET_COMPUTER_HAS_USED_AIRCRAFT_CARRIER_ABILITY, true);\r\n    store.commit(Mutation.SET_COMPUTER_IS_USING_AIRCRAFT_CARRIER_ABILITY, false);\r\n  }\r\n\r\n  // Computer normal move\r\n  else {\r\n    const move = makeRandomValidMove(player_board);\r\n    const tile = player_board[move.row][move.col];\r\n\r\n    // Hit the square\r\n    const new_tile = JSON.parse(JSON.stringify(tile));\r\n    if (new_tile.ship !== undefined) {\r\n      new_tile.contains.successfulShot = true;\r\n\r\n      // If the ship is an aircraft carrier, subtract 1 from its health\r\n      if (tile.ship?.name === ShipName.AIRCRAFT_CARRIER) {\r\n        store.commit(Mutation.SET_PLAYER_AIRCRAFT_CARRIER_HEALTH, store.state.player.aircraftCarrierHealth - 1);\r\n      }\r\n\r\n      // If the ship is a battleship, subtract 1 from its health\r\n      else if (tile.ship?.name === ShipName.BATTLESHIP) {\r\n        store.commit(Mutation.SET_PLAYER_BATTLESHIP_HEALTH, store.state.player.battleshipHealth - 1);\r\n      }\r\n\r\n      // If the ship is a submarine, sink it, as it only has 1 health\r\n      else if (tile.ship?.name === ShipName.SUBMARINE) {\r\n        store.commit(Mutation.SET_PLAYER_HAS_USED_SUBMARINE_ABILITY, true);\r\n      }\r\n\r\n    }\r\n    else {\r\n      new_tile.contains.missedShot = true;\r\n    }\r\n\r\n    // Reflect the state of the square\r\n    store.commit(Mutation.SET_PLAYER_TILE, {\r\n      row: move.row,\r\n      col: move.col,\r\n      tile: new_tile\r\n    });\r\n  }\r\n\r\n  // Check if either the battleship or the aircraft carrier were sunk\r\n  if (store.state.player.aircraftCarrierHealth === 0) {\r\n    store.commit(Mutation.SET_PLAYER_HAS_USED_AIRCRAFT_CARRIER_ABILITY, true);\r\n  } else if (store.state.player.battleshipHealth === 0) {\r\n    store.commit(Mutation.SET_PLAYER_HAS_USED_BATTLESHIP_ABILITY, true);\r\n  }\r\n\r\n  // Check if the computer won\r\n  let computer_won = true;\r\n  for (let row = 0; row < player_board.length; row++) {\r\n    for (let col = 0; col < player_board[row].length; col++) {\r\n      if (player_board[row][col].ship !== undefined && !player_board[row][col].contains.successfulShot) {\r\n        computer_won = false;\r\n        break\r\n      }\r\n    }\r\n  }\r\n\r\n  // If so, change the state of the game\r\n  if (computer_won) {\r\n    store.commit(Mutation.SET_GAME_IS_IN_PROGRESS, false);\r\n    store.commit(Mutation.SET_COMPUTER_HAS_WON_THE_GAME, true);\r\n    return;\r\n  }\r\n\r\n  // Since the computer's move is over, change the turn\r\n  store.commit(Mutation.SET_COMPUTER_HAS_CURRENT_TURN, false);\r\n  store.commit(Mutation.SET_PLAYER_HAS_CURRENT_TURN, true);\r\n\r\n}\r\n\nreturn (_ctx: any,_cache: any) => {\n  return (_openBlock(), _createElementBlock(\"div\", {\n    class: _normalizeClass(_unref(background)),\n    onClick: Attack\n  }, [\n    _createVNode(Sprite, {\n      tile: __props.tile,\n      isPlayerSquare: false\n    }, null, 8, [\"tile\"])\n  ], 2))\n}\n}\n\n})","import script from \"./EnemySquare.vue?vue&type=script&setup=true&lang=ts\"\nexport * from \"./EnemySquare.vue?vue&type=script&setup=true&lang=ts\"\n\nimport \"./EnemySquare.vue?vue&type=style&index=0&id=7d8c9478&scoped=true&lang=css\"\n\nimport exportComponent from \"C:\\\\Users\\\\Admin\\\\Desktop\\\\battleship\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-7d8c9478\"]])\n\nexport default __exports__","import { defineComponent as _defineComponent } from 'vue'\nimport { unref as _unref, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\"\n\nconst _hoisted_1 = [\"disabled\"]\nconst _hoisted_2 = [\"disabled\"]\nconst _hoisted_3 = [\"disabled\"]\n\nimport { useStore } from '@/store'\r\nimport { Mutation } from '@/store/enums';\r\nimport { computed } from 'vue';\r\n\r\n\r\n\nexport default /*#__PURE__*/_defineComponent({\n  __name: 'AbilityButtons',\n  setup(__props) {\n\r\nconst store = useStore()\r\n\r\nconst isSubmarineAbilityButtonDisabled = computed(() => {\r\n  return (\r\n    store.state.computer.hasCurrentTurn\r\n    || store.state.player.hasUsedSubmarineAbility\r\n    || store.state.player.isUsingSubmarineAbility\r\n    || store.state.player.isUsingAircraftCarrierAbility\r\n    || store.state.player.isUsingBattleshipAbility\r\n  )\r\n})\r\n\r\nconst isAircraftCarrierAbilityButtonDisabled = computed(() => {\r\n  return (\r\n    store.state.computer.hasCurrentTurn\r\n    || store.state.player.hasUsedAircraftCarrierAbility\r\n    || store.state.player.isUsingSubmarineAbility\r\n    || store.state.player.isUsingAircraftCarrierAbility\r\n    || store.state.player.isUsingBattleshipAbility\r\n  )\r\n})\r\n\r\nconst isBattleshipAbilityButtonDisabled = computed(() => {\r\n  return (\r\n    store.state.computer.hasCurrentTurn\r\n    || store.state.player.hasUsedBattleshipAbility\r\n    || store.state.player.isUsingSubmarineAbility\r\n    || store.state.player.isUsingAircraftCarrierAbility\r\n    || store.state.player.isUsingBattleshipAbility\r\n  )\r\n})\r\n\r\nconst submarineAbilityButtonText = computed(() => {\r\n  return store.state.player.isUsingSubmarineAbility\r\n    ? 'Using Submarine Ability'\r\n    : 'Use Submarine Ability'\r\n})\r\n\r\nconst aircraftCarrierAbilityButtonText = computed(() => {\r\n  return store.state.player.isUsingAircraftCarrierAbility\r\n    ? 'Using Aircraft Carrier Ability'\r\n    : 'Use Aircraft Carrier Ability'\r\n})\r\n\r\nconst battleshipAbilityButtonText = computed(() => {\r\n  return store.state.player.isUsingBattleshipAbility\r\n    ? 'Using Battleship Ability'\r\n    : 'Use Battleship Ability'\r\n})\r\n\nreturn (_ctx: any,_cache: any) => {\n  return (_openBlock(), _createElementBlock(_Fragment, null, [\n    _createElementVNode(\"button\", {\n      disabled: _unref(isSubmarineAbilityButtonDisabled),\n      onClick: _cache[0] || (_cache[0] = ($event: any) => (_unref(store).commit(_unref(Mutation).SET_PLAYER_IS_USING_SUBMARINE_ABILITY, true)))\n    }, _toDisplayString(_unref(submarineAbilityButtonText)), 9, _hoisted_1),\n    _createElementVNode(\"button\", {\n      disabled: _unref(isAircraftCarrierAbilityButtonDisabled),\n      onClick: _cache[1] || (_cache[1] = ($event: any) => (_unref(store).commit(_unref(Mutation).SET_PLAYER_IS_USING_AIRCRAFT_CARRIER_ABILITY, true)))\n    }, _toDisplayString(_unref(aircraftCarrierAbilityButtonText)), 9, _hoisted_2),\n    _createElementVNode(\"button\", {\n      disabled: _unref(isBattleshipAbilityButtonDisabled),\n      onClick: _cache[2] || (_cache[2] = ($event: any) => (_unref(store).commit(_unref(Mutation).SET_PLAYER_IS_USING_BATTLESHIP_ABILITY, true)))\n    }, _toDisplayString(_unref(battleshipAbilityButtonText)), 9, _hoisted_3)\n  ], 64))\n}\n}\n\n})","import script from \"./AbilityButtons.vue?vue&type=script&lang=ts&setup=true\"\nexport * from \"./AbilityButtons.vue?vue&type=script&lang=ts&setup=true\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { defineComponent as _defineComponent } from 'vue'\nimport { unref as _unref, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\"\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-1f97b336\"),n=n(),_popScopeId(),n)\nconst _hoisted_1 = { class: \"winner-modal\" }\nconst _hoisted_2 = { class: \"winner-modal-content\" }\nconst _hoisted_3 = { key: 0 }\nconst _hoisted_4 = { key: 1 }\n\nimport { useStore } from '@/store'\r\nimport { useRouter } from 'vue-router';\r\nimport { Mutation } from '@/store/enums';\r\n\r\n\r\n\nexport default /*#__PURE__*/_defineComponent({\n  __name: 'MatchResultModal',\n  setup(__props) {\n\r\nconst store = useStore();\r\nconst router = useRouter();\r\n\r\n/**\r\n * Resets the root state to the initial state and redirects to the home page\r\n */\r\nfunction newGame() {\r\n  store.commit(Mutation.SET_GAME_IS_IN_PROGRESS, false);\r\n  store.commit(Mutation.SET_GAME_MAP_NAME, undefined);\r\n\r\n  store.commit(Mutation.SET_GUI_SUBMARINE_COUNT, 0);\r\n  store.commit(Mutation.SET_GUI_SUPPLY_BOAT_COUNT, 0);\r\n  store.commit(Mutation.SET_GUI_DESTROYER_COUNT, 0);\r\n  store.commit(Mutation.SET_GUI_BATTLESHIP_COUNT, 0);\r\n  store.commit(Mutation.SET_GUI_AIRCRAFT_CARRIER_COUNT, 0);\r\n\r\n  store.commit(Mutation.SET_PLAYER_IS_USING_SUBMARINE_ABILITY, false)\r\n  store.commit(Mutation.SET_PLAYER_IS_USING_AIRCRAFT_CARRIER_ABILITY, false)\r\n  store.commit(Mutation.SET_PLAYER_IS_USING_BATTLESHIP_ABILITY, false)\r\n\r\n  store.commit(Mutation.SET_PLAYER_HAS_USED_SUBMARINE_ABILITY, false)\r\n  store.commit(Mutation.SET_PLAYER_HAS_USED_AIRCRAFT_CARRIER_ABILITY, false)\r\n  store.commit(Mutation.SET_PLAYER_HAS_USED_BATTLESHIP_ABILITY, false)\r\n\r\n  store.commit(Mutation.SET_PLAYER_AIRCRAFT_CARRIER_HEALTH, 10)\r\n  store.commit(Mutation.SET_PLAYER_BATTLESHIP_HEALTH, 4)\r\n\r\n  store.commit(Mutation.SET_PLAYER_AIRCRAFT_CARRIER_SHOTS, 0)\r\n\r\n  store.commit(Mutation.SET_PLAYER_HAS_CURRENT_TURN, false)\r\n  store.commit(Mutation.SET_PLAYER_HAS_WON_THE_GAME, false)\r\n\r\n  store.commit(Mutation.SET_PLAYER_BOARD, [[]])\r\n\r\n  store.commit(Mutation.SET_COMPUTER_IS_USING_SUBMARINE_ABILITY, false)\r\n  store.commit(Mutation.SET_COMPUTER_IS_USING_AIRCRAFT_CARRIER_ABILITY, false)\r\n  store.commit(Mutation.SET_COMPUTER_IS_USING_BATTLESHIP_ABILITY, false)\r\n\r\n  store.commit(Mutation.SET_COMPUTER_HAS_USED_SUBMARINE_ABILITY, false)\r\n  store.commit(Mutation.SET_COMPUTER_HAS_USED_AIRCRAFT_CARRIER_ABILITY, false)\r\n  store.commit(Mutation.SET_COMPUTER_HAS_USED_BATTLESHIP_ABILITY, false)\r\n\r\n  store.commit(Mutation.SET_COMPUTER_AIRCRAFT_CARRIER_HEALTH, 10)\r\n  store.commit(Mutation.SET_COMPUTER_BATTLESHIP_HEALTH, 4)\r\n\r\n  store.commit(Mutation.SET_COMPUTER_AIRCRAFT_CARRIER_SHOTS, 0)\r\n\r\n  store.commit(Mutation.SET_COMPUTER_HAS_CURRENT_TURN, false)\r\n  store.commit(Mutation.SET_COMPUTER_HAS_WON_THE_GAME, false)\r\n\r\n  store.commit(Mutation.SET_COMPUTER_BOARD, [[]])\r\n\r\n  router.push({ name: 'Index' })\r\n}\r\n\nreturn (_ctx: any,_cache: any) => {\n  return (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [\n    _createElementVNode(\"div\", _hoisted_2, [\n      (_unref(store).state.player.hasWonTheGame)\n        ? (_openBlock(), _createElementBlock(\"h2\", _hoisted_3, \" You Win! \"))\n        : (_unref(store).state.computer.hasWonTheGame)\n          ? (_openBlock(), _createElementBlock(\"h2\", _hoisted_4, \" You Lose! \"))\n          : _createCommentVNode(\"\", true),\n      _createElementVNode(\"button\", { onClick: newGame }, \" New Game \")\n    ])\n  ]))\n}\n}\n\n})","import script from \"./MatchResultModal.vue?vue&type=script&lang=ts&setup=true\"\nexport * from \"./MatchResultModal.vue?vue&type=script&lang=ts&setup=true\"\n\nimport \"./MatchResultModal.vue?vue&type=style&index=0&id=1f97b336&scoped=true&lang=css\"\n\nimport exportComponent from \"C:\\\\Users\\\\Admin\\\\Desktop\\\\battleship\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-1f97b336\"]])\n\nexport default __exports__","import { defineComponent as _defineComponent } from 'vue'\nimport { unref as _unref, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, createElementBlock as _createElementBlock, createVNode as _createVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\"\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-77e02b65\"),n=n(),_popScopeId(),n)\nconst _hoisted_1 = { class: \"container\" }\nconst _hoisted_2 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"h1\", null, \" Battleship Game \", -1))\nconst _hoisted_3 = { class: \"boards\" }\nconst _hoisted_4 = { class: \"board-wrapper\" }\nconst _hoisted_5 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"h2\", null, \" Enemy Board \", -1))\nconst _hoisted_6 = { class: \"board\" }\nconst _hoisted_7 = { class: \"board-wrapper\" }\nconst _hoisted_8 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"h2\", null, \" Player Board \", -1))\nconst _hoisted_9 = { class: \"board\" }\nconst _hoisted_10 = { class: \"gui\" }\nconst _hoisted_11 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"h2\", null, \" GUI \", -1))\nconst _hoisted_12 = { key: 0 }\nconst _hoisted_13 = { key: 1 }\n\nimport PlayerSquare from '@/components/PlayerSquare.vue';\r\nimport EnemySquare from '@/components/EnemySquare.vue';\r\nimport AbilityButtons from '@/components/AbilityButtons.vue';\r\nimport MatchResultModal from '@/components/MatchResultModal.vue';\r\nimport { useStore } from '@/store'\r\n\r\n\r\n\nexport default /*#__PURE__*/_defineComponent({\n  __name: 'Game',\n  setup(__props) {\n\r\nconst store = useStore()\r\n\nreturn (_ctx: any,_cache: any) => {\n  return (_openBlock(), _createElementBlock(_Fragment, null, [\n    (_unref(store).state.player.hasWonTheGame || _unref(store).state.computer.hasWonTheGame)\n      ? (_openBlock(), _createBlock(MatchResultModal, { key: 0 }))\n      : _createCommentVNode(\"\", true),\n    _createElementVNode(\"div\", _hoisted_1, [\n      _hoisted_2,\n      _createElementVNode(\"div\", _hoisted_3, [\n        _createElementVNode(\"div\", _hoisted_4, [\n          _hoisted_5,\n          _createElementVNode(\"div\", _hoisted_6, [\n            (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_unref(store).state.computer.board, (row, rowIndex) => {\n              return (_openBlock(), _createElementBlock(\"div\", {\n                key: rowIndex,\n                class: \"board-row\"\n              }, [\n                (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(row, (col, colIndex) => {\n                  return (_openBlock(), _createElementBlock(\"div\", {\n                    key: colIndex,\n                    class: \"board-cell\"\n                  }, [\n                    _createVNode(EnemySquare, {\n                      tile: col,\n                      row: rowIndex,\n                      col: colIndex\n                    }, null, 8, [\"tile\", \"row\", \"col\"])\n                  ]))\n                }), 128))\n              ]))\n            }), 128))\n          ])\n        ]),\n        _createElementVNode(\"div\", _hoisted_7, [\n          _hoisted_8,\n          _createElementVNode(\"div\", _hoisted_9, [\n            (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_unref(store).state.player.board, (row, rowIndex) => {\n              return (_openBlock(), _createElementBlock(\"div\", {\n                key: rowIndex,\n                class: \"board-row\"\n              }, [\n                (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(row, (col, colIndex) => {\n                  return (_openBlock(), _createElementBlock(\"div\", {\n                    key: colIndex,\n                    class: \"board-cell\"\n                  }, [\n                    _createVNode(PlayerSquare, {\n                      tile: col,\n                      row: rowIndex,\n                      col: colIndex\n                    }, null, 8, [\"tile\", \"row\", \"col\"])\n                  ]))\n                }), 128))\n              ]))\n            }), 128))\n          ])\n        ])\n      ]),\n      _createElementVNode(\"div\", _hoisted_10, [\n        _hoisted_11,\n        (_unref(store).state.player.hasCurrentTurn)\n          ? (_openBlock(), _createElementBlock(\"h3\", _hoisted_12, \" Your Turn \"))\n          : (_openBlock(), _createElementBlock(\"h3\", _hoisted_13, \" Enemy's Turn \")),\n        _createVNode(AbilityButtons)\n      ])\n    ])\n  ], 64))\n}\n}\n\n})","import script from \"./Game.vue?vue&type=script&lang=ts&setup=true\"\nexport * from \"./Game.vue?vue&type=script&lang=ts&setup=true\"\n\nimport \"./Game.vue?vue&type=style&index=0&id=77e02b65&scoped=true&lang=css\"\n\nimport exportComponent from \"C:\\\\Users\\\\Admin\\\\Desktop\\\\battleship\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-77e02b65\"]])\n\nexport default __exports__"],"names":["_defineComponent","__name","props","tile","row","col","setup","__props","store","useStore","background","computed","isWater","isLand","isOutOfBounds","Attack","state","computer","hasCurrentTurn","computer_board","board","player_board","player","isInvalidSquare","isUsingSubmarineAbility","undefined","ship","new_tile","JSON","parse","stringify","contains","uncoveredShip","commit","Mutation","missedShot","successfulShot","length","name","ShipName","isUsingBattleshipAbility","aircraftCarrierHealth","battleshipHealth","isUsingAircraftCarrierAbility","aircraftCarrierShots","player_won","hasUsedAircraftCarrierAbility","hasUsedBattleshipAbility","hasUsedSubmarineAbility","move","makeRandomValidMove","computer_won","_ctx","_cache","_openBlock","_createElementBlock","class","_normalizeClass","_unref","onClick","_createVNode","Sprite","isPlayerSquare","__exports__","_hoisted_1","_hoisted_2","_hoisted_3","isSubmarineAbilityButtonDisabled","isAircraftCarrierAbilityButtonDisabled","isBattleshipAbilityButtonDisabled","submarineAbilityButtonText","aircraftCarrierAbilityButtonText","battleshipAbilityButtonText","_Fragment","_createElementVNode","disabled","$event","SET_PLAYER_IS_USING_SUBMARINE_ABILITY","_toDisplayString","SET_PLAYER_IS_USING_AIRCRAFT_CARRIER_ABILITY","SET_PLAYER_IS_USING_BATTLESHIP_ABILITY","key","_hoisted_4","router","useRouter","newGame","push","hasWonTheGame","_createCommentVNode","_withScopeId","n","_pushScopeId","_popScopeId","_hoisted_5","_hoisted_6","_hoisted_7","_hoisted_8","_hoisted_9","_hoisted_10","_hoisted_11","_hoisted_12","_hoisted_13","_createBlock","MatchResultModal","_renderList","rowIndex","colIndex","EnemySquare","PlayerSquare","AbilityButtons"],"sourceRoot":""}