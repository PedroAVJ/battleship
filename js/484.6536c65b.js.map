{"version":3,"file":"js/484.6536c65b.js","mappings":"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","sources":["webpack://battleship/./src/utils/Game.ts","webpack://battleship/./src/components/PlayerBoard.vue?7bc6","webpack://battleship/./src/components/PlayerBoard.vue","webpack://battleship/./src/components/ShipItem.vue?8a58","webpack://battleship/./src/components/ShipItem.vue","webpack://battleship/./src/views/PlaceShips.vue?77f2","webpack://battleship/./src/views/PlaceShips.vue"],"sourcesContent":["import { User, Tile } from \"./Interfaces\";\r\nimport { ShipName, Orientation } from \"./Enums\";\r\nimport { SHIPS } from \"./Constants\";\r\n\r\n\r\n// Hacky way to wait inlined in a function\r\nexport function sleep(ms: number) {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n\r\nexport function allShipsPlaced(user: User): boolean {\r\n    let flag = true;\r\n    Object.values(ShipName).forEach((shipName) => {\r\n        if (user[shipName].guiCount > 0) {\r\n            flag = false;\r\n        }\r\n    });\r\n    return flag;\r\n}\r\n\r\nexport function isGameOver(board: Tile[][]): boolean {\r\n\r\n    // Empty board is not game over\r\n    if (board.length === 0) return false;\r\n    if (board[0].length === 0) return false;\r\n\r\n    for (const row of board) {\r\n        for (const tile of row) {\r\n            if (tile.shipHitbox && !tile.contains.successfulShot) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\nexport function hasValidMove(board: Tile[][]): boolean {\r\n    for (const row of board) {\r\n        for (const tile of row) {\r\n            if (!isInvalidSquare(tile)) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nexport function makeRandomValidMove(board: Tile[][]): { row: number, col: number } {\r\n    if (isGameOver(board)) {\r\n        throw new Error('Game is over, cannot make a move.');\r\n    }\r\n    if (!hasValidMove(board)) {\r\n        throw new Error('No valid moves available.');\r\n    }\r\n    const row = Math.floor(Math.random() * board.length);\r\n    const col = Math.floor(Math.random() * board[0].length);\r\n\r\n    if (isInvalidSquare(board[row][col])) {\r\n        return makeRandomValidMove(board);\r\n    }\r\n    return { row, col };\r\n}\r\n\r\nexport function getShipHitboxes(shipName: ShipName, orientation: Orientation): { row: number, col: number }[] {\r\n    const shipHitboxes: { row: number, col: number }[] = [];\r\n    for (let i = 0; i < SHIPS[shipName].length; i++) {\r\n        for (let j = 0; j < SHIPS[shipName].width; j++) {\r\n\r\n            // If the ship is horizontal, i represents the column and j represents the row\r\n            // This is because the length moves horizontally and the width moves vertically\r\n            // X X X X X\r\n            // X X X X X\r\n            if (orientation === Orientation.HORIZONTAL) {\r\n                shipHitboxes.push({\r\n                    row: j,\r\n                    col: i,\r\n                });\r\n            }\r\n\r\n            // If the ship is vertical, i represents the row and j represents the column\r\n            // This is because the length moves vertically and the width moves horizontally\r\n            // X X\r\n            // X X\r\n            // X X\r\n            // X X\r\n            if (orientation === Orientation.VERTICAL) {\r\n                shipHitboxes.push({\r\n                    row: i,\r\n                    col: j,\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    return shipHitboxes;\r\n}\r\n\r\nexport function isInvalidShipPlacement(board: Tile[][], shipName: ShipName, shipOrientation: Orientation, row: number, col: number): boolean {\r\n    const shipHitboxes = getShipHitboxes(shipName, shipOrientation);\r\n    for (const hitbox of shipHitboxes) {\r\n        if (hitbox.row + row >= board.length) return true;\r\n        if (hitbox.col + col >= board[0].length) return true;\r\n        const tile = board[hitbox.row + row][hitbox.col + col];\r\n        if (isInvalidSquare(tile)) return true;\r\n        if (tile.shipHitbox) return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nexport function placeShip(board: Tile[][], shipName: ShipName, shipOrientation: Orientation, row: number, col: number): void {\r\n    if (isInvalidShipPlacement(board, shipName, shipOrientation, row, col)) {\r\n        throw new Error('Invalid ship placement.');\r\n    }\r\n    const shipHitboxes = getShipHitboxes(shipName, shipOrientation);\r\n    for (const hitbox of shipHitboxes) {\r\n        const tile = board[hitbox.row + row][hitbox.col + col];\r\n        tile.shipHitbox = shipName;\r\n        const isFirstHitbox = hitbox.row === 0 && hitbox.col === 0;\r\n        if (isFirstHitbox) {\r\n            tile.shipSprite = {\r\n                name: shipName,\r\n                orientation: shipOrientation,\r\n                isPreview: false,\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport function randomlyPlaceShips(board: Tile[][], shipNames: ShipName[]): void {\r\n    shipNames.forEach((shipName) => {\r\n        for (let i = 0; i < SHIPS[shipName].count; i++) {\r\n            while (true) {\r\n                const row = Math.floor(Math.random() * board.length);\r\n                const col = Math.floor(Math.random() * board[0].length);\r\n                const orientation = Math.random() < 0.5 ? Orientation.HORIZONTAL : Orientation.VERTICAL;\r\n\r\n                if (isInvalidShipPlacement(board, shipName, orientation, row, col)) continue;\r\n\r\n                placeShip(board, shipName, orientation, row, col);\r\n                break;\r\n            }\r\n        }\r\n    });\r\n\r\n}\r\n\r\nexport function uncoverShip(board: Tile[][], shipName: ShipName): void {\r\n    for (const row of board) {\r\n        for (const tile of row) {\r\n            if (tile.shipHitbox && tile.shipHitbox === shipName) {\r\n                tile.contains.uncoveredShip = true;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport function submarineAttack(board: Tile[][], row_origin: number, col_origin: number): void {\r\n    for (let row = row_origin - 1; row <= row_origin + 1; row++) {\r\n        for (let col = col_origin - 1; col <= col_origin + 1; col++) {\r\n\r\n            // Out of bounds check\r\n            if (row < 0 || row >= board.length) continue;\r\n            if (col < 0 || col >= board[0].length) continue;\r\n\r\n            const tile = board[row][col];\r\n            if (isInvalidSquare(tile)) continue;\r\n\r\n            if (tile.shipHitbox) {\r\n                tile.contains.uncoveredShip = true;\r\n            }\r\n            else {\r\n                tile.contains.missedShot = true;\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport function battleshipAttack(board: Tile[][], row_origin: number, col_origin: number): void {\r\n    for (let row = row_origin - 1; row <= row_origin + 1; row++) {\r\n        for (let col = col_origin - 1; col <= col_origin + 1; col++) {\r\n            normalAttack(board, row, col);\r\n        }\r\n    }\r\n}\r\n\r\nexport function normalAttack(board: Tile[][], row: number, col: number): void {\r\n\r\n    // Out of bounds check\r\n    if (row < 0 || row >= board.length) return;\r\n    if (col < 0 || col >= board[0].length) return;\r\n\r\n    const tile = board[row][col];\r\n    if (isInvalidSquare(tile)) return;\r\n\r\n\r\n    if (tile.shipHitbox) {\r\n        tile.contains.successfulShot = true;\r\n    }\r\n    else {\r\n        tile.contains.missedShot = true;\r\n    }\r\n}\r\n\r\nexport function isInvalidSquare(tile: Tile): boolean {\r\n    const isInvalidSquare =\r\n        tile.background.isLand\r\n        || tile.background.isOutOfBounds\r\n        || tile.contains.missedShot\r\n        || tile.contains.successfulShot;\r\n    return isInvalidSquare;\r\n}\r\n\r\nexport function useAbility(user: User): void {\r\n\r\n    // The priority of the abilities is as follows:\r\n    // 1. Battleship\r\n    // 2. Submarine\r\n    // 3. Aircraft Carrier\r\n    // This goes from most powerful to least powerful\r\n\r\n    if (!user[ShipName.BATTLESHIP].hasUsedAbility) {\r\n\r\n        // Randomly use this ability, as a function of the battleship health\r\n        const health = user[ShipName.BATTLESHIP].health;\r\n\r\n        // Base probability is 5%\r\n        let probability = 0.05;\r\n\r\n        // Probability increases as the battleship health decreases\r\n        if (health === 3) {\r\n            probability = 0.1;\r\n        } else if (health === 2) {\r\n            probability = 0.4;\r\n        } else if (health === 1) {\r\n            probability = 0.8;\r\n        }\r\n\r\n        if (Math.random() < probability) {\r\n            user[ShipName.BATTLESHIP].isUsingAbility = true;\r\n            return;\r\n        }\r\n\r\n    }\r\n\r\n    if (!user[ShipName.SUBMARINE].hasUsedAbility) {\r\n        \r\n        // Since its health is 1, the probability is constant\r\n        if (Math.random() < 0.1) {\r\n            user[ShipName.SUBMARINE].isUsingAbility = true;\r\n            return;\r\n        }\r\n\r\n    }\r\n\r\n    if (!user[ShipName.AIRCRAFT_CARRIER].hasUsedAbility) {\r\n        \r\n        // Randomly use this ability, as a function of the aircraft carrier health\r\n        const health = user[ShipName.AIRCRAFT_CARRIER].health;\r\n\r\n        // Base probability is 5%\r\n        let probability = 0.05;\r\n\r\n        // Probability increases as the aircraft carrier health decreases\r\n        if (health === 6) {\r\n            probability = 0.1;\r\n        } else if (health === 5) {\r\n            probability = 0.15;\r\n        } else if (health === 4) {\r\n            probability = 0.2;\r\n        } else if (health === 3) {\r\n            probability = 0.30;\r\n        } else if (health === 2) {\r\n            probability = 0.60;\r\n        } else if (health === 1) {\r\n            probability = 0.90;\r\n        }\r\n\r\n        if (Math.random() < probability) {\r\n            user[ShipName.AIRCRAFT_CARRIER].isUsingAbility = true;\r\n            return;\r\n        }\r\n    }\r\n\r\n    // Getting here means that no ability was used\r\n    return;\r\n}\r\n\r\n/**\r\n * It will try to return moves that are adjacent\r\n * to squares which still haven't been fully sunk.\r\n * Because all ships are longer than wider (except for the submarine,\r\n * which is equal in length and width), it is best to look for adjacent\r\n * squares in the direction of the longest straight line of hits.\r\n */\r\nexport function mostLikelyAdjacentSquare(user: User):  { row: number, col: number } {\r\n\r\n    // Initialize the scores array\r\n    const scores: number[][] = [];\r\n    for (let row = 0; row < user.board.length; row++) {\r\n        scores.push([]);\r\n        for (let col = 0; col < user.board[0].length; col++) {\r\n            scores[row].push(0);\r\n        }\r\n    }\r\n\r\n    // Create a copy of the board, where we will remove the ships, as to not leak information\r\n    let boardWithoutShips = JSON.parse(JSON.stringify(user.board)) as Tile[][];\r\n    for (const row of boardWithoutShips) {\r\n        for (const tile of row) {\r\n            if (tile.shipHitbox) {\r\n                tile.shipSprite = undefined;\r\n\r\n                // Because we don't want to take into account sunk ships\r\n                // we will change the contains successful shot to false and\r\n                // make it a missed shot\r\n                const shipName = tile.shipHitbox;\r\n                if (user[shipName].health === 0) {\r\n                    tile.contains.successfulShot = false;\r\n                    tile.contains.missedShot = true;\r\n                }\r\n\r\n                // In any case, we will remove the ship hitbox\r\n                tile.shipHitbox = undefined;\r\n            }\r\n        }\r\n    }\r\n\r\n    // Iterate over the board\r\n    for (let row = 0; row < boardWithoutShips.length; row++) {\r\n        for (let col = 0; col < boardWithoutShips[0].length; col++) {\r\n            const tile = boardWithoutShips[row][col];\r\n            if (isInvalidSquare(tile)) continue;\r\n\r\n            // Top\r\n            let scoreTop = 0;\r\n            for (let i = row - 1; i >= 0; i--) {\r\n                if (boardWithoutShips[i][col].contains.successfulShot) {\r\n                    scoreTop++;\r\n                } else {\r\n                    break;\r\n                }\r\n            }\r\n\r\n            // Bottom\r\n            let scoreBottom = 0;\r\n            for (let i = row + 1; i < boardWithoutShips.length; i++) {\r\n                if (boardWithoutShips[i][col].contains.successfulShot) {\r\n                    scoreBottom++;\r\n                } else {\r\n                    break;\r\n                }\r\n            }\r\n\r\n            // Left\r\n            let scoreLeft = 0;\r\n            for (let i = col - 1; i >= 0; i--) {\r\n                if (boardWithoutShips[row][i].contains.successfulShot) {\r\n                    scoreLeft++;\r\n                } else {\r\n                    break;\r\n                }\r\n            }\r\n\r\n            // Right\r\n            let scoreRight = 0;\r\n            for (let i = col + 1; i < boardWithoutShips[0].length; i++) {\r\n                if (boardWithoutShips[row][i].contains.successfulShot) {\r\n                    scoreRight++;\r\n                } else {\r\n                    break;\r\n                }\r\n            }\r\n\r\n            // Update the scores\r\n            scores[row][col] = Math.max(scoreTop, scoreBottom, scoreLeft, scoreRight);\r\n        }\r\n    }\r\n\r\n    // Find the square with the highest score\r\n    let maxScore = 0;\r\n    let maxScoreRow = -1;\r\n    let maxScoreCol = -1;\r\n    for (let row = 0; row < scores.length; row++) {\r\n        for (let col = 0; col < scores[0].length; col++) {\r\n            if (scores[row][col] > maxScore) {\r\n                maxScore = scores[row][col];\r\n                maxScoreRow = row;\r\n                maxScoreCol = col;\r\n            }\r\n        }\r\n    }\r\n\r\n    // If the max score is 0, then we will just make a random move\r\n    if (maxScore === 0) {\r\n        return makeRandomValidMove(user.board);\r\n    }\r\n\r\n    // Otherwise, we will make the move with the highest score\r\n    return { row: maxScoreRow, col: maxScoreCol };\r\n}\r\n\r\n/**\r\n * We will compute a heat map of the board, where each square\r\n * is assigned a value based on the probability that it contains\r\n * a ship. Calculating this precisely takes too long, so we will\r\n * use the Monte Carlo method to estimate this probability.\r\n */\r\nexport function makeOptimalMove(user: User): { row: number, col: number } {\r\n    const numberOfSimulations = 1000;\r\n    const heatMap: number[][] = [];\r\n    for (let row = 0; row < user.board.length; row++) {\r\n        heatMap.push([]);\r\n        for (let col = 0; col < user.board[0].length; col++) {\r\n            heatMap[row].push(0);\r\n        }\r\n    }\r\n\r\n    // List of ships that are not yet sunk\r\n    const shipsNotYetSunk: ShipName[] = [];\r\n    Object.values(ShipName).forEach((shipName) => {\r\n        if (user[shipName].health > 0) {\r\n            shipsNotYetSunk.push(shipName);\r\n        }\r\n    });\r\n\r\n    // Order the ships by health, so that we can place the larger ships first\r\n    shipsNotYetSunk.sort((a, b) => {\r\n        const shipAHealth = SHIPS[a].length * SHIPS[a].width;\r\n        const shipBHealth = SHIPS[b].length * SHIPS[b].width;\r\n        return shipBHealth - shipAHealth;\r\n    });\r\n\r\n    // Define a board which will not contain any ships, as to not leak information\r\n    let boardWithoutShips = JSON.parse(JSON.stringify(user.board)) as Tile[][];\r\n    for (const row of boardWithoutShips) {\r\n        for (const tile of row) {\r\n            tile.shipHitbox = undefined;\r\n            tile.shipSprite = undefined;\r\n        }\r\n    }\r\n\r\n\r\n    // Run the simulations\r\n    for (let i = 0; i < numberOfSimulations; i++) {\r\n        const board = JSON.parse(JSON.stringify(boardWithoutShips)) as Tile[][];\r\n        \r\n        // For each simulation, we will attempt to place all the ships\r\n        // from the ships that are not yet sunk\r\n\r\n        randomlyPlaceShips(board, shipsNotYetSunk);\r\n\r\n        // Now we update the heat map, based on the ships that were placed\r\n        for (let row = 0; row < board.length; row++) {\r\n            for (let col = 0; col < board[0].length; col++) {\r\n                const tile = board[row][col];\r\n                if (tile.shipHitbox) {\r\n                    heatMap[row][col]++;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // Divide by the number of simulations to get the probability\r\n    for (let row = 0; row < heatMap.length; row++) {\r\n        for (let col = 0; col < heatMap[0].length; col++) {\r\n            heatMap[row][col] /= numberOfSimulations;\r\n        }\r\n    }\r\n\r\n    // Now we find the square with the highest probability\r\n    let maxProbability = 0;\r\n    let maxProbabilityRow = -1;\r\n    let maxProbabilityCol = -1;\r\n    for (let row = 0; row < heatMap.length; row++) {\r\n        for (let col = 0; col < heatMap[0].length; col++) {\r\n            if (heatMap[row][col] > maxProbability) {\r\n                maxProbability = heatMap[row][col];\r\n                maxProbabilityRow = row;\r\n                maxProbabilityCol = col;\r\n            }\r\n        }\r\n    }\r\n\r\n    // If the max probability is 0, then we will just make a random move\r\n    if (maxProbability === 0) {\r\n        return makeRandomValidMove(user.board);\r\n    }\r\n\r\n    // Otherwise, we will make the move with the highest probability\r\n    return { row: maxProbabilityRow, col: maxProbabilityCol };\r\n}","import { defineComponent as _defineComponent } from 'vue'\nimport { unref as _unref, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createVNode as _createVNode, withModifiers as _withModifiers, normalizeClass as _normalizeClass, createElementVNode as _createElementVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\"\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-61b0d520\"),n=n(),_popScopeId(),n)\nconst _hoisted_1 = { class: \"board-wrapper\" }\nconst _hoisted_2 = [\"onDragenter\", \"onDragleave\", \"onDrop\", \"onTouchstart\", \"onTouchend\"]\n\nimport Sprite from '@/components/Sprite.vue';\r\nimport { useStore } from '@/store';\r\nimport { Tile } from '@/utils/Interfaces';\r\nimport { isInvalidShipPlacement, placeShip } from '@/utils/Game';\r\n\r\n\nexport default /*#__PURE__*/_defineComponent({\n  __name: 'PlayerBoard',\n  setup(__props) {\n\r\nconst store = useStore();\r\n\r\nlet touchedElement: any = null;\r\n\r\nfunction touchStart(e: TouchEvent, row: number, col: number) {\r\n  touchedElement = e.target;\r\n  dragEnter(e, row, col);\r\n}\r\n\r\nfunction touchEnd(e: TouchEvent, row: number, col: number) {\r\n  if (touchedElement === e.target) {\r\n    drop(e, row, col);\r\n    touchedElement = null;\r\n  }\r\n}\r\n\r\n\r\nfunction getBackground(tile: Tile) {\r\n  if (tile.background.isWater) return 'water';\r\n  if (tile.background.isLand) return 'land';\r\n  if (tile.background.isOutOfBounds) return 'out-of-bounds';\r\n}\r\n\r\nfunction dragEnter(e: MouseEvent | TouchEvent, row: number, col: number) {\r\n  if (!(e.target instanceof HTMLElement)) return;\r\n  \r\n  // Get the ship name and orientation from the global state\r\n  const shipName = store.currentlyDraggedShip?.name;\r\n  const shipOrientation = store.currentlyDraggedShip?.orientation;\r\n\r\n  if (!shipName || !shipOrientation) return;\r\n  const board = store.player.board;\r\n  if (isInvalidShipPlacement(board, shipName, shipOrientation, row, col)) return;\r\n  \r\n  // Set the ship preview and add the darken class\r\n  board[row][col].shipSprite = {\r\n    name: shipName,\r\n    orientation: shipOrientation,\r\n    isPreview: true,\r\n  }\r\n  e.target.classList.add('darken');\r\n\r\n}\r\n\r\nfunction dragLeave(e: MouseEvent | TouchEvent, row: number, col: number) {\r\n  if (!(e.target instanceof HTMLElement)) return;\r\n  \r\n  // Get the ship name and orientation from the global state\r\n  const shipName = store.currentlyDraggedShip?.name;\r\n  const shipOrientation = store.currentlyDraggedShip?.orientation;\r\n\r\n  if (!shipName || !shipOrientation) return;\r\n  const board = store.player.board;\r\n  if (isInvalidShipPlacement(board, shipName, shipOrientation, row, col)) return;\r\n  \r\n  // Remove the ship preview and the darken class\r\n  board[row][col].shipSprite = undefined;\r\n  e.target.classList.remove('darken');\r\n\r\n}\r\n\r\nfunction drop(e: MouseEvent | TouchEvent, row: number, col: number) {\r\n  if (!(e.target instanceof HTMLElement)) return;\r\n  \r\n  // Get the ship name and orientation from the global state\r\n  const shipName = store.currentlyDraggedShip?.name;\r\n  const shipOrientation = store.currentlyDraggedShip?.orientation;\r\n\r\n  if (!shipName || !shipOrientation) return;\r\n  const board = store.player.board;\r\n  if (isInvalidShipPlacement(board, shipName, shipOrientation, row, col)) return;\r\n\r\n  placeShip(board, shipName, shipOrientation, row, col);\r\n  store.setPlayerShipGUICount(shipName, store.player[shipName].guiCount - 1);\r\n\r\n  // Remove the darken class\r\n  e.target.classList.remove('darken');\r\n\r\n};\r\n\nreturn (_ctx: any,_cache: any) => {\n  return (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [\n    (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_unref(store).player.board, (row, rowIndex) => {\n      return (_openBlock(), _createElementBlock(\"div\", {\n        key: rowIndex,\n        class: \"board-row\"\n      }, [\n        (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(row, (col, colIndex) => {\n          return (_openBlock(), _createElementBlock(\"div\", {\n            key: colIndex,\n            class: \"board-cell\"\n          }, [\n            _createElementVNode(\"div\", {\n              class: _normalizeClass(getBackground(col)),\n              onDragenter: ($event: any) => (dragEnter($event, rowIndex, colIndex)),\n              onDragleave: ($event: any) => (dragLeave($event, rowIndex, colIndex)),\n              onDragover: _cache[0] || (_cache[0] = _withModifiers(() => {}, [\"prevent\"])),\n              onDrop: ($event: any) => (drop($event, rowIndex, colIndex)),\n              onTouchstart: ($event: any) => (touchStart($event, rowIndex, colIndex)),\n              onTouchend: ($event: any) => (touchEnd($event, rowIndex, colIndex))\n            }, [\n              _createVNode(Sprite, { tile: col }, null, 8, [\"tile\"])\n            ], 42, _hoisted_2)\n          ]))\n        }), 128))\n      ]))\n    }), 128))\n  ]))\n}\n}\n\n})","import script from \"./PlayerBoard.vue?vue&type=script&lang=ts&setup=true\"\nexport * from \"./PlayerBoard.vue?vue&type=script&lang=ts&setup=true\"\n\nimport \"./PlayerBoard.vue?vue&type=style&index=0&id=61b0d520&scoped=true&lang=css\"\n\nimport exportComponent from \"C:\\\\Users\\\\Admin\\\\Desktop\\\\battleship\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-61b0d520\"]])\n\nexport default __exports__","import { defineComponent as _defineComponent } from 'vue'\nimport { unref as _unref, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, renderSlot as _renderSlot, normalizeClass as _normalizeClass, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\"\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-0974f5a8\"),n=n(),_popScopeId(),n)\nconst _hoisted_1 = [\"id\"]\nconst _hoisted_2 = { class: \"secondary-text\" }\nconst _hoisted_3 = { class: \"secondary-text\" }\nconst _hoisted_4 = { class: \"secondary-text\" }\n\nimport { ref, watch } from 'vue';\r\nimport { useStore } from '@/store';\r\nimport { ShipName, Orientation } from '@/utils/Enums';\r\nimport { SHIPS } from '@/utils/Constants';\r\n\r\n\r\n\nexport default /*#__PURE__*/_defineComponent({\n  __name: 'ShipItem',\n  props: {\n    shipName: null\n  },\n  setup(__props: any) {\n\nconst props = __props as {\r\n  shipName: ShipName,\r\n};\n\r\n\r\nconst store = useStore();\r\n\r\nconst orientation = ref<Orientation>(Orientation.HORIZONTAL);\r\nconst svgContainer = ref<HTMLElement | null>(null);\r\n\r\nwatch(() => store.currentlyDraggedShip?.name, (newVal) => {\r\n  if (newVal === props.shipName) {\r\n    svgContainer.value?.classList.add('selected');\r\n  } else {\r\n    svgContainer.value?.classList.remove('selected');\r\n  }\r\n});\r\n\r\nfunction dragStart(e: DragEvent) {\r\n  if (!(e.target instanceof HTMLElement)) return;\r\n  store.setCurrentlyDraggedShip(props.shipName, orientation.value);\r\n}\r\n\r\nfunction touchStart(e: TouchEvent) {\r\n  if (!(e.target instanceof HTMLElement)) return;\r\n  store.setCurrentlyDraggedShip(props.shipName, orientation.value);\r\n}\r\n\r\nfunction touchEnd(e: TouchEvent) {\r\n  if (!(e.target instanceof HTMLElement)) return;\r\n\r\n  // Reset the ship's position style\r\n  e.target.style.position = '';\r\n  e.target.style.left = '';\r\n  e.target.style.top = '';\r\n  e.target.style.zIndex = '';\r\n}\r\n\r\n\r\nfunction toggleOrientation() {\r\n  if (orientation.value === Orientation.HORIZONTAL) {\r\n    orientation.value = Orientation.VERTICAL;\r\n  } else {\r\n    orientation.value = Orientation.HORIZONTAL;\r\n  }\r\n}\r\n\nreturn (_ctx: any,_cache: any) => {\n  return (_unref(store).player[__props.shipName].guiCount > 0)\n    ? (_openBlock(), _createElementBlock(\"div\", {\n        key: 0,\n        id: __props.shipName,\n        class: \"secondary-background\"\n      }, [\n        _createElementVNode(\"h2\", _hoisted_2, _toDisplayString(__props.shipName), 1),\n        _createElementVNode(\"div\", {\n          ref_key: \"svgContainer\",\n          ref: svgContainer,\n          class: \"svg-container\",\n          draggable: \"true\",\n          onDragstart: dragStart,\n          onTouchstart: touchStart,\n          onTouchend: touchEnd\n        }, [\n          _renderSlot(_ctx.$slots, \"default\")\n        ], 544),\n        _createElementVNode(\"span\", _hoisted_3, \" Size: \" + _toDisplayString(_unref(SHIPS)[props.shipName].length) + \" x \" + _toDisplayString(_unref(SHIPS)[props.shipName].width), 1),\n        _createElementVNode(\"button\", {\n          class: _normalizeClass(['primary-button', orientation.value]),\n          onClick: toggleOrientation\n        }, _toDisplayString(orientation.value), 3),\n        _createElementVNode(\"span\", _hoisted_4, \" Count: x\" + _toDisplayString(_unref(store).player[__props.shipName].guiCount), 1)\n      ], 8, _hoisted_1))\n    : _createCommentVNode(\"\", true)\n}\n}\n\n})","import script from \"./ShipItem.vue?vue&type=script&lang=ts&setup=true\"\nexport * from \"./ShipItem.vue?vue&type=script&lang=ts&setup=true\"\n\nimport \"./ShipItem.vue?vue&type=style&index=0&id=0974f5a8&scoped=true&lang=css\"\n\nimport exportComponent from \"C:\\\\Users\\\\Admin\\\\Desktop\\\\battleship\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-0974f5a8\"]])\n\nexport default __exports__","import { defineComponent as _defineComponent } from 'vue'\nimport { unref as _unref, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, createVNode as _createVNode, withCtx as _withCtx, createElementVNode as _createElementVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\"\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-16da5694\"),n=n(),_popScopeId(),n)\nconst _hoisted_1 = { class: \"view-wrapper\" }\nconst _hoisted_2 = {\n  key: 0,\n  class: \"primary-text\"\n}\nconst _hoisted_3 = {\n  key: 1,\n  class: \"primary-text\"\n}\nconst _hoisted_4 = {\n  key: 3,\n  class: \"gui\"\n}\nconst _hoisted_5 = {\n  key: 0,\n  class: \"primary-text mt-5\"\n}\nconst _hoisted_6 = {\n  key: 1,\n  class: \"primary-text mt-5\"\n}\nconst _hoisted_7 = { class: \"ship-container\" }\n\nimport ShipItem from '@/components/ShipItem.vue'\r\nimport { useStore } from '@/store';\r\nimport { useRouter } from 'vue-router';\r\nimport PlayerBoard from '@/components/PlayerBoard.vue';\r\nimport { allShipsPlaced, randomlyPlaceShips } from '@/utils/Game';\r\nimport { ShipName } from '@/utils/Enums';\r\nimport { Tile } from '@/utils/Interfaces';\r\nimport { computed } from 'vue';\r\n\r\n// SVG's\r\nimport Submarine from '@/components/SVGs/Ships/Submarine.vue'\r\nimport SupplyBoat from '@/components/SVGs/Ships/SupplyBoat.vue'\r\nimport Destroyer from '@/components/SVGs/Ships/Destroyer.vue'\r\nimport Battleship from '@/components/SVGs/Ships/Battleship.vue'\r\nimport Frigate from '@/components/SVGs/Ships/Frigate.vue'\r\nimport AircraftCarrier from '@/components/SVGs/Ships/AircraftCarrier.vue'\r\n\r\n\nexport default /*#__PURE__*/_defineComponent({\n  __name: 'PlaceShips',\n  setup(__props) {\n\r\nconst store = useStore()\r\nconst router = useRouter()\r\n\r\n// This determines if the user is on a mobile device\r\nconst isMobile = computed(() => /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent))\r\n\r\nfunction startGame() {\r\n\r\n  // Save the current board state, as it will be reset when the game starts\r\n  const player_board_tiles = JSON.parse(JSON.stringify(store.player.board)) as Tile[][]\r\n  const computer_board_tiles = JSON.parse(JSON.stringify(store.computer.board)) as Tile[][]\r\n\r\n  store.$reset()\r\n\r\n  // Restore the board state\r\n  store.setPlayerBoard(player_board_tiles)\r\n  store.setComputerBoard(computer_board_tiles)\r\n\r\n  const ships = Object.values(ShipName)\r\n  randomlyPlaceShips(store.computer.board, ships)\r\n  store.setPlayerHasCurrentTurn(true)\r\n  router.push({ name: 'Game' })\r\n}\r\n\nreturn (_ctx: any,_cache: any) => {\n  return (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [\n    (_unref(allShipsPlaced)(_unref(store).player))\n      ? (_openBlock(), _createElementBlock(\"h1\", _hoisted_2, \" Start Game \"))\n      : (_openBlock(), _createElementBlock(\"h1\", _hoisted_3, \" Place Your Ships \")),\n    _createVNode(PlayerBoard),\n    (_unref(allShipsPlaced)(_unref(store).player))\n      ? (_openBlock(), _createElementBlock(\"button\", {\n          key: 2,\n          onClick: startGame,\n          class: \"primary-button mt-5\"\n        }, \" Start Game \"))\n      : (_openBlock(), _createElementBlock(\"div\", _hoisted_4, [\n          (_unref(isMobile))\n            ? (_openBlock(), _createElementBlock(\"h2\", _hoisted_5, \" Tap on a ship and tap the board to place it \"))\n            : (_openBlock(), _createElementBlock(\"h2\", _hoisted_6, \" Drag a ship and drop it on the board to place it \")),\n          _createElementVNode(\"div\", _hoisted_7, [\n            _createVNode(ShipItem, {\n              \"ship-name\": _unref(ShipName).AIRCRAFT_CARRIER\n            }, {\n              default: _withCtx(() => [\n                _createVNode(AircraftCarrier)\n              ]),\n              _: 1\n            }, 8, [\"ship-name\"]),\n            _createVNode(ShipItem, {\n              \"ship-name\": _unref(ShipName).SUBMARINE\n            }, {\n              default: _withCtx(() => [\n                _createVNode(Submarine)\n              ]),\n              _: 1\n            }, 8, [\"ship-name\"]),\n            _createVNode(ShipItem, {\n              \"ship-name\": _unref(ShipName).DESTROYER\n            }, {\n              default: _withCtx(() => [\n                _createVNode(Destroyer)\n              ]),\n              _: 1\n            }, 8, [\"ship-name\"]),\n            _createVNode(ShipItem, {\n              \"ship-name\": _unref(ShipName).BATTLESHIP\n            }, {\n              default: _withCtx(() => [\n                _createVNode(Battleship)\n              ]),\n              _: 1\n            }, 8, [\"ship-name\"]),\n            _createVNode(ShipItem, {\n              \"ship-name\": _unref(ShipName).FRIGATE\n            }, {\n              default: _withCtx(() => [\n                _createVNode(Frigate)\n              ]),\n              _: 1\n            }, 8, [\"ship-name\"]),\n            _createVNode(ShipItem, {\n              \"ship-name\": _unref(ShipName).SUPPLY_BOAT\n            }, {\n              default: _withCtx(() => [\n                _createVNode(SupplyBoat)\n              ]),\n              _: 1\n            }, 8, [\"ship-name\"])\n          ])\n        ]))\n  ]))\n}\n}\n\n})","import script from \"./PlaceShips.vue?vue&type=script&lang=ts&setup=true\"\nexport * from \"./PlaceShips.vue?vue&type=script&lang=ts&setup=true\"\n\nimport \"./PlaceShips.vue?vue&type=style&index=0&id=16da5694&scoped=true&lang=css\"\n\nimport exportComponent from \"C:\\\\Users\\\\Admin\\\\Desktop\\\\battleship\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-16da5694\"]])\n\nexport default __exports__"],"names":["sleep","ms","Promise","resolve","setTimeout","allShipsPlaced","user","flag","Object","values","ShipName","forEach","shipName","guiCount","isGameOver","board","length","row","tile","shipHitbox","contains","successfulShot","hasValidMove","isInvalidSquare","makeRandomValidMove","Error","Math","floor","random","col","getShipHitboxes","orientation","shipHitboxes","i","SHIPS","j","width","Orientation","push","isInvalidShipPlacement","shipOrientation","hitbox","placeShip","isFirstHitbox","shipSprite","name","isPreview","randomlyPlaceShips","shipNames","count","uncoverShip","uncoveredShip","submarineAttack","row_origin","col_origin","missedShot","battleshipAttack","normalAttack","background","isLand","isOutOfBounds","useAbility","hasUsedAbility","health","probability","isUsingAbility","mostLikelyAdjacentSquare","scores","boardWithoutShips","JSON","parse","stringify","undefined","scoreTop","scoreBottom","scoreLeft","scoreRight","max","maxScore","maxScoreRow","maxScoreCol","makeOptimalMove","numberOfSimulations","heatMap","shipsNotYetSunk","sort","a","b","shipAHealth","shipBHealth","maxProbability","maxProbabilityRow","maxProbabilityCol","_hoisted_1","class","_hoisted_2","_defineComponent","__name","setup","__props","store","useStore","touchedElement","touchStart","e","target","dragEnter","touchEnd","drop","getBackground","isWater","HTMLElement","currentlyDraggedShip","player","classList","add","dragLeave","remove","setPlayerShipGUICount","_ctx","_cache","_openBlock","_createElementBlock","_Fragment","_renderList","_unref","rowIndex","key","colIndex","_createElementVNode","_normalizeClass","onDragenter","$event","onDragleave","onDragover","_withModifiers","onDrop","onTouchstart","onTouchend","_createVNode","Sprite","__exports__","_hoisted_3","_hoisted_4","props","ref","svgContainer","dragStart","setCurrentlyDraggedShip","value","style","position","left","top","zIndex","toggleOrientation","watch","newVal","id","_toDisplayString","ref_key","draggable","onDragstart","_renderSlot","$slots","onClick","_createCommentVNode","_hoisted_5","_hoisted_6","_hoisted_7","router","useRouter","isMobile","computed","test","navigator","userAgent","startGame","player_board_tiles","computer_board_tiles","computer","$reset","setPlayerBoard","setComputerBoard","ships","setPlayerHasCurrentTurn","PlayerBoard","ShipItem","AIRCRAFT_CARRIER","default","_withCtx","AircraftCarrier","_","SUBMARINE","Submarine","DESTROYER","Destroyer","BATTLESHIP","Battleship","FRIGATE","Frigate","SUPPLY_BOAT","SupplyBoat"],"sourceRoot":""}